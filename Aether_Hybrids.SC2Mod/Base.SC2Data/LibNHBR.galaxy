include "TriggerLibs/NativeLib"

include "LibNHBR_h"

//--------------------------------------------------------------------------------------------------
// Library: Network Hybrid Race
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libNHBR_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libNHBR_InitVariables_completed = false;

void libNHBR_InitVariables () {
    int init_i;

    if (libNHBR_InitVariables_completed) {
        return;
    }

    libNHBR_InitVariables_completed = true;

    libNHBR_gv_hybridBuildControllerRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, ("NHbrMinionBuild@Main"), "Range", c_playerAny);
    for (init_i = 0; init_i <= libNHBR_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libNHBR_gv_hybridNetworkNewPowerSourceUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libNHBR_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libNHBR_gv_hybridTeleportUnitGroup[init_i] = UnitGroupEmpty();
    }
    libNHBR_gv_silentWeaponCooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, "NHbrSilentWeapon", "Period", c_playerAny);
    libNHBR_gv_silentAttacksPerSecond = (1.0 / libNHBR_gv_silentWeaponCooldown);
}

// Presets
// Functions
int libNHBR_gf_CustomValueIndex (int lp_customValue) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_customValue);
}

bool libNHBR_gf_HybridBuildControllerIsBuildOrder (order lp_order) {
    // Variable Declarations
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCommand = OrderGetAbilityCommand(lp_order);

    // Implementation
    if (((lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 1)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 4)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 17)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 16)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 10)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 9)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 0)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 8)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 5)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 11)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 12)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 6)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 13)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild", 2)))) {
        return true;
    }

    return false;
}

bool libNHBR_gf_HybridBuildControllerIsBuildOrderMain (order lp_order) {
    // Variable Declarations
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCommand = OrderGetAbilityCommand(lp_order);

    // Implementation
    if (((lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 1)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 4)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 17)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 16)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 10)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 9)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 0)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 8)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 5)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 11)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 12)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 6)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 13)) || (lv_abilityCommand == AbilityCommand("NHbrMinionBuild@Main", 2)))) {
        return true;
    }

    return false;
}

abilcmd libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return AbilityCommand("NHbrMinionBuild@Main", lv_index);
}

abilcmd libNHBR_gf_HybridBuildControllerReturnDefaultBuildAbilityCommand (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return AbilityCommand("NHbrMinionBuild", lv_index);
}

int libNHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex (unit lp_minion) {
    // Variable Declarations
    int lv_itOrder;

    // Automatic Variable Declarations
    int autoC1436286_ae;
    const int autoC1436286_ai = 1;

    // Variable Initialization

    // Implementation
    autoC1436286_ae = (UnitOrderCount(lp_minion)-1);
    lv_itOrder = 0;
    for ( ; ( (autoC1436286_ai >= 0 && lv_itOrder <= autoC1436286_ae) || (autoC1436286_ai < 0 && lv_itOrder >= autoC1436286_ae) ) ; lv_itOrder += autoC1436286_ai ) {
        if ((libNHBR_gf_HybridBuildControllerIsBuildOrderMain(UnitOrder(lp_minion, lv_itOrder)) == true)) {
            return lv_itOrder;
        }

    }
    return -1;
}

fixed libNHBR_gf_HybridBuildControllerReturnBuildUnitRadius (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("NHbrMinionBuild@Main"), "InfoArray[" + IntToString(lv_index) + "].Unit", c_playerAny), "Radius", c_playerAny);
}

void libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "NHbrTimeScaleBuff@RemoveTimeScaleBuff", lp_unit);
}

void libNHBR_gf_HybridTimeScaleBuffAddTimeScaleBuffToUnitFromUnit (unit lp_casterUnit, fixed lp_casterEnergyPerUsage, unit lp_targetUnit) {
    // Variable Declarations
    fixed lv_percent;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_percent = libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff(lp_casterUnit, lp_casterEnergyPerUsage);
    lv_index = FixedToInt((lv_percent * 100.0));
    UnitBehaviorAdd(lp_targetUnit, libNHBR_gv_hybridTimeScaleBuff[lv_index], lp_casterUnit, 1);
}

fixed libNHBR_gf_HybridTimeScaleBuffCalculateEnergyUsageForUnit (unit lp_unit) {
    // Variable Declarations
    fixed lv_energyUsage;
    int lv_energyMaximum;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_energyUsage = UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent);
    if ((UnitGetType(lp_unit) == "NHbrMinion")) {
        if ((lv_energyUsage > libNHBR_gv_hybridTimeScaleBuffMaximumEnergyPerUsage_Minion_C)) {
            lv_energyUsage = libNHBR_gv_hybridTimeScaleBuffMaximumEnergyPerUsage_Minion_C;
        }

    }
    else {
        if ((lv_energyUsage > libNHBR_gv_hybridTimeScaleBuffMaximumEnergyPerUsage_Structure_C)) {
            lv_energyUsage = libNHBR_gv_hybridTimeScaleBuffMaximumEnergyPerUsage_Structure_C;
        }

    }
    return lv_energyUsage;
}

fixed libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff (unit lp_casterUnit, fixed lp_casterEnergyPerUsage) {
    // Variable Declarations
    fixed lv_percent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_percent = (lp_casterEnergyPerUsage / libNHBR_gv_hybridTimeScaleBuffMaximumEnergyPerUsage_Structure_C);
    if ((lv_percent > libNHBR_gv_hybridTimeScaleBuffMaximumTimeScaleBonus_C)) {
        lv_percent = libNHBR_gv_hybridTimeScaleBuffMaximumTimeScaleBonus_C;
    }

    return lv_percent;
}

fixed libNHBR_gf_HybridTimeScaleBuffUnitConstructionTime (unit lp_unit, string lp_ability) {
    // Variable Declarations
    string lv_unitType;
    string lv_itUnitType;
    int lv_itField;
    fixed lv_time;

    // Automatic Variable Declarations
    const int auto01CA055F_ae = 29;
    const int auto01CA055F_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    lv_itField = 0;
    for ( ; ( (auto01CA055F_ai >= 0 && lv_itField <= auto01CA055F_ae) || (auto01CA055F_ai < 0 && lv_itField >= auto01CA055F_ae) ) ; lv_itField += auto01CA055F_ai ) {
        lv_itUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_itField) + "].Unit", c_playerAny));
        if ((lv_itUnitType == lv_unitType)) {
            return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_itField) + "].Time", c_playerAny);
        }

    }
    return 0.0;
}

fixed libNHBR_gf_HybridTimeScaleBuffUpgradeResearchTime (string lp_upgrade, unit lp_unit) {
    // Variable Declarations
    string lv_itUpgrade;
    int lv_itField;
    fixed lv_time;
    string lv_itAbility;

    // Automatic Variable Declarations
    unit autoAFB2F69E_unit;
    int autoAFB2F69E_i;
    const int autoB8336FA1_ae = 29;
    const int autoB8336FA1_ai = 1;

    // Variable Initialization

    // Implementation
    autoAFB2F69E_unit = lp_unit;
    autoAFB2F69E_i = 1;
    for ( ; autoAFB2F69E_i <= UnitAbilityCount(autoAFB2F69E_unit) ; autoAFB2F69E_i += 1 ) {
        lv_itAbility = UnitAbilityGet(autoAFB2F69E_unit, autoAFB2F69E_i);
        if ((CatalogEntryScope(c_gameCatalogAbil, lv_itAbility) == "CAbilResearch")) {
            lv_itField = 0;
            for ( ; ( (autoB8336FA1_ai >= 0 && lv_itField <= autoB8336FA1_ae) || (autoB8336FA1_ai < 0 && lv_itField >= autoB8336FA1_ae) ) ; lv_itField += autoB8336FA1_ai ) {
                lv_itUpgrade = (CatalogFieldValueGet(c_gameCatalogAbil, lv_itAbility, "InfoArray[" + IntToString(lv_itField) + "].Upgrade", c_playerAny));
                if ((lv_itUpgrade == lp_upgrade)) {
                    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itAbility, "InfoArray[" + IntToString(lv_itField) + "].Time", c_playerAny);
                }

            }
        }

    }
    return 0.0;
}

bool libNHBR_gf_VoidRiftUpgrade (string lp_upgrade) {
    // Variable Declarations
    bool lv_l_Bool;

    // Automatic Variable Declarations
    const int auto909D44C3_ae = 3;
    int auto909D44C3_var;

    // Variable Initialization

    // Implementation
    auto909D44C3_var = 1;
    for ( ; auto909D44C3_var <= auto909D44C3_ae; auto909D44C3_var += 1 ) {
        if (((lp_upgrade == (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(auto909D44C3_var)))) || (lp_upgrade == (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(auto909D44C3_var)))) || (lp_upgrade == (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(auto909D44C3_var)))) || (lp_upgrade == (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(auto909D44C3_var)))) || (lp_upgrade == (("NHbrEngineResearch@ProtectionArmor" + IntToString(auto909D44C3_var)))))) {
            lv_l_Bool = true;
            break;
        }

    }
    return lv_l_Bool;
}

void libNHBR_gf_VoidRiftVariables () {
    // Automatic Variable Declarations
    // Implementation
    libNHBR_gv_voidRiftUnitSpawns[1][1] = "Marine";
    libNHBR_gv_voidRiftUnitSpawns[1][2] = "Marauder";
    libNHBR_gv_voidRiftUnitSpawns[1][3] = "Reaper";
    libNHBR_gv_voidRiftUnitSpawns[1][4] = "Ghost";
    libNHBR_gv_voidRiftUnitSpawns[1][5] = "HellionTank";
    libNHBR_gv_voidRiftUnitSpawns[1][6] = "Cyclone";
    libNHBR_gv_voidRiftUnitSpawns[1][7] = "SiegeTank";
    libNHBR_gv_voidRiftUnitSpawns[1][8] = "ThorAP";
    libNHBR_gv_voidRiftUnitSpawns[1][9] = "VikingFighter";
    libNHBR_gv_voidRiftUnitSpawns[1][10] = "Medivac";
    libNHBR_gv_voidRiftUnitSpawns[1][11] = "Banshee";
    libNHBR_gv_voidRiftUnitSpawns[1][12] = "Liberator";
    libNHBR_gv_voidRiftUnitSpawns[1][13] = "Battlecruiser";
    libNHBR_gv_voidRiftUnitSpawns[2][14] = "Raven";
    libNHBR_gv_voidRiftUnitSpawns[2][1] = "Zergling";
    libNHBR_gv_voidRiftUnitSpawns[2][2] = "Baneling";
    libNHBR_gv_voidRiftUnitSpawns[2][3] = "Roach";
    libNHBR_gv_voidRiftUnitSpawns[2][4] = "Queen";
    libNHBR_gv_voidRiftUnitSpawns[2][5] = "Ravager";
    libNHBR_gv_voidRiftUnitSpawns[2][6] = "Hydralisk";
    libNHBR_gv_voidRiftUnitSpawns[2][7] = "Mutalisk";
    libNHBR_gv_voidRiftUnitSpawns[2][8] = "Corruptor";
    libNHBR_gv_voidRiftUnitSpawns[2][9] = "Ultralisk";
    libNHBR_gv_voidRiftUnitSpawns[2][10] = "BroodLord";
    libNHBR_gv_voidRiftUnitSpawns[3][1] = "Zealot";
    libNHBR_gv_voidRiftUnitSpawns[3][2] = "Stalker";
    libNHBR_gv_voidRiftUnitSpawns[3][3] = "Adept";
    libNHBR_gv_voidRiftUnitSpawns[3][4] = "Sentry";
    libNHBR_gv_voidRiftUnitSpawns[3][5] = "HighTemplar";
    libNHBR_gv_voidRiftUnitSpawns[3][6] = "DarkTemplar";
    libNHBR_gv_voidRiftUnitSpawns[3][7] = "Immortal";
    libNHBR_gv_voidRiftUnitSpawns[3][8] = "Colossus";
    libNHBR_gv_voidRiftUnitSpawns[3][9] = "Phoenix";
    libNHBR_gv_voidRiftUnitSpawns[3][10] = "VoidRay";
    libNHBR_gv_voidRiftUnitSpawns[3][11] = "Tempest";
    libNHBR_gv_voidRiftUnitSpawns[3][12] = "Carrier";
    libNHBR_gv_voidRiftUnitSpawns[3][13] = "Observer";
}

string libNHBR_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto1EA6F447_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto1EA6F447_val = lp_type;
    if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (auto1EA6F447_val == libNHBR_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libNHBR_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libNHBR_gf_ActorStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libNHBR_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libNHBR_gf_TextTagStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libNHBR_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libNHBR_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libNHBR_gf_StoreRegionForUnit (unit lp_unit, int lp_index, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Point, lp_unit, lp_index), lp_region);
}

region libNHBR_gf_RegionStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libNHBR_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libNHBR_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libNHBR_gf_StoreIntegerForUnit (unit lp_unit, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Integer, lp_unit, lp_index), lp_value);
}

int libNHBR_gf_IntegerStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Integer, lp_unit, lp_index));
}

void libNHBR_gf_StoreUnitForUnit (unit lp_unit, int lp_index, unit lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Unit, lp_unit, lp_index), lp_value);
}

unit libNHBR_gf_UnitStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_Unit, lp_unit, lp_index));
}

void libNHBR_gf_StoreUnitGroupForUnit (unit lp_unit, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_UnitGroup, lp_unit, lp_index), lp_value);
}

unitgroup libNHBR_gf_UnitGroupStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, libNHBR_gf__UnitDataName(libNHBR_ge__UnitDataType_UnitGroup, lp_unit, lp_index));
}

void libNHBR_gf_RemoveDataFromUnit (string lp__UnitDataName, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableValueRemove(true, lp__UnitDataName);
}

void libNHBR_gf_UpgradeButtontoButtonForPlayer (string lp_sourceButton, string lp_targetButton, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "AlertIcon", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "AlertIcon", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "AlertName", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "AlertName", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "AlertTooltip", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "AlertTooltip", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "Icon", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "Icon", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "Name", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "Name", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, lp_sourceButton, "Tooltip", lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_targetButton, "Tooltip", c_playerAny));
}

void libNHBR_gf_UpgradeUnittoUnitForPlayer (string lp_sourceUnit, string lp_targetUnit, int lp_player) {
    // Variable Declarations
    string lv_u1;
    string lv_u2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u1 = lp_sourceUnit;
    lv_u2 = lp_targetUnit;
    lv_player = lp_player;

    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "LifeMax", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "LifeMax", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "LifeStart", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "LifeStart", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "ShieldsMax", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "ShieldsMax", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "ShieldsStart", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "ShieldsStart", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "EnergyMax", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "EnergyMax", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "EnergyStart", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "EnergyStart", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "Name", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "Name", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "Description", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "Description", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "CostResource[" + IntToString(0) + "]", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "CostResource[" + IntToString(0) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "CostResource[" + IntToString(1) + "]", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "CostResource[" + IntToString(1) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "CostResource[" + IntToString(2) + "]", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "CostResource[" + IntToString(2) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "CostResource[" + IntToString(3) + "]", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "CostResource[" + IntToString(3) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogUnit, lv_u1, "Speed", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_u2, "Speed", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogActor, lv_u1, "HighlightTooltip", lv_player, CatalogFieldValueGet(c_gameCatalogActor, lv_u2, "HighlightTooltip", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogActor, lv_u1, "CustomUnitStatusFrame", lv_player, CatalogFieldValueGet(c_gameCatalogActor, lv_u2, "CustomUnitStatusFrame", c_playerAny));
}

bool libNHBR_gf_RunValidatorOnUnit (string lp_validator, unit lp_sourceUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (ValidatorExecute(lp_validator, lp_sourceUnit, lp_targetUnit) == 0);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Create Dominator/Behemoth
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_CreateDominatorBehemoth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "NHbrDominatorAdvanced") || (UnitGetType(EventUnitCreatedUnit()) == "NHbrReaverAdvanced")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "NHbrDominatorAdvanced")) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(EventUnitCreatedUnit(), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("HybridTransmissions", 2), StringExternal("Param/Value/lib_NHBR_8317D3D1"), StringExternal("Param/Value/lib_NHBR_DE72DB85"), 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(EventUnitCreatedUnit(), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("HybridTransmissions", 0), StringExternal("Param/Value/lib_NHBR_B8AA51A9"), StringExternal("Param/Value/lib_NHBR_AA8E6B34"), 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_CreateDominatorBehemoth_Init () {
    libNHBR_gt_CreateDominatorBehemoth = TriggerCreate("libNHBR_gt_CreateDominatorBehemoth_Func");
    TriggerAddEventUnitCreated(libNHBR_gt_CreateDominatorBehemoth, null, "NHbrVoidRiftTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Propagator Touch Ground
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_PropagatorTouchGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PropagatorChrysalis", 0, EventPlayer(), UnitGetPosition(EventPlayerEffectUsedUnitImpact()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_PropagatorTouchGround_Init () {
    libNHBR_gt_PropagatorTouchGround = TriggerCreate("libNHBR_gt_PropagatorTouchGround_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_PropagatorTouchGround, c_playerAny, "PropagatorGroundDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Propagator Touch Air
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_PropagatorTouchAir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PropagatorChrysalis", 0, EventPlayer(), UnitGetPosition(EventPlayerEffectUsedUnitImpact()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_PropagatorTouchAir_Init () {
    libNHBR_gt_PropagatorTouchAir = TriggerCreate("libNHBR_gt_PropagatorTouchAir_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_PropagatorTouchAir, c_playerAny, "PropagatorAirDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Reanimate Revive
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidReanimateRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    const int auto53C5A232_ae = libNHBR_gv_c_UNIT_REVIVE_MAX;
    int auto53C5A232_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitTargetUnit();
    auto53C5A232_var = 1;
    for ( ; auto53C5A232_var <= auto53C5A232_ae; auto53C5A232_var += 1 ) {
        if ((lv_unit == libNHBR_gv_deathCorpseUnits[auto53C5A232_var][EventPlayer()])) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libNHBR_gv_deathUnits[auto53C5A232_var][EventPlayer()], 0, EventPlayer(), UnitGetPosition(libNHBR_gv_deathCorpseUnits[auto53C5A232_var][EventPlayer()]));
            UnitRemove(libNHBR_gv_deathCorpseUnits[auto53C5A232_var][EventPlayer()]);
            libNHBR_gv_deathCorpseUnits[auto53C5A232_var][EventPlayer()] = null;
            libNHBR_gv_deathUnits[auto53C5A232_var][EventPlayer()] = null;
            if ((UnitGetType(EventUnit()) != ("NHbrFlayer")) && (UnitGetType(EventUnit()) != "NHbrWarrior")) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(UnitLastCreated())))), c_orderQueueReplace);
                UnitBehaviorAdd(UnitLastCreated(), "VoidSpawn", EventUnit(), 1);
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidReanimateRevive_Init () {
    libNHBR_gt_VoidReanimateRevive = TriggerCreate("libNHBR_gt_VoidReanimateRevive_Func");
    TriggerAddEventUnitAbility(libNHBR_gt_VoidReanimateRevive, null, AbilityCommand("NHbrVoidReanimate", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Reanimator Unit Death
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidReanimatorUnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    point lv_point;

    // Automatic Variable Declarations
    const int autoD5F53A81_ae = libNHBR_gv_c_UNIT_REVIVE_MAX;
    int autoD5F53A81_var;
    const int auto7B9C615C_ae = libNHBR_gv_c_UNIT_REVIVE_MAX;
    int auto7B9C615C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "NHbr"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "VoidSpawn") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitType = UnitGetType(EventUnit());
    lv_point = UnitGetPosition(EventUnit());
    autoD5F53A81_var = 1;
    for ( ; autoD5F53A81_var <= autoD5F53A81_ae; autoD5F53A81_var += 1 ) {
        if ((libNHBR_gv_deathUnits[autoD5F53A81_var][EventPlayer()] == null) && (libNHBR_gv_deathCorpseUnits[autoD5F53A81_var][EventPlayer()] == null)) {
            libNHBR_gv_deathUnits[autoD5F53A81_var][EventPlayer()] = lv_unitType;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidCorpse", 0, EventPlayer(), lv_point);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("SetTintColor " + libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))))));
            libNHBR_gv_deathCorpseUnits[autoD5F53A81_var][EventPlayer()] = UnitLastCreated();
            break;
        }
        else {
            if ((autoD5F53A81_var == libNHBR_gv_c_UNIT_REVIVE_MAX)) {
                UnitRemove(libNHBR_gv_deathCorpseUnits[1][EventPlayer()]);
                auto7B9C615C_var = 2;
                for ( ; auto7B9C615C_var <= auto7B9C615C_ae; auto7B9C615C_var += 1 ) {
                    libNHBR_gv_deathUnits[(auto7B9C615C_var - 1)][EventPlayer()] = libNHBR_gv_deathUnits[auto7B9C615C_var][EventPlayer()];
                    libNHBR_gv_deathCorpseUnits[(auto7B9C615C_var - 1)][EventPlayer()] = libNHBR_gv_deathCorpseUnits[auto7B9C615C_var][EventPlayer()];
                }
                libNHBR_gv_deathUnits[autoD5F53A81_var][EventPlayer()] = lv_unitType;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidCorpse", 0, EventPlayer(), lv_point);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("SetTintColor " + libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))))));
                libNHBR_gv_deathCorpseUnits[autoD5F53A81_var][EventPlayer()] = UnitLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidReanimatorUnitDeath_Init () {
    libNHBR_gt_VoidReanimatorUnitDeath = TriggerCreate("libNHBR_gt_VoidReanimatorUnitDeath_Func");
    TriggerAddEventUnitDied(libNHBR_gt_VoidReanimatorUnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_MapInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto748CCDDB_g;
    int auto748CCDDB_var;
    playergroup auto6F144C91_g;
    int auto6F144C91_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == false)) {
        PlayerSetRace(1, "NHbr");
        Wait(0.0, c_timeGame);
        PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
        PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 100000);
        TriggerEnable(libNHBR_gt_OfflineTestingResetPlayer2Resource, true);
        ConsoleCommand("fastbuild", true, true);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NHBR_BA6E9E21"), true);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NHBR_B3CFA9DD"), true);
        PlayerSetAlliance(2, c_allianceIdControl, 1, true);
    }
    else {
        auto748CCDDB_g = PlayerGroupActive();
        auto748CCDDB_var = -1;
        while (true) {
            auto748CCDDB_var = PlayerGroupNextPlayer(auto748CCDDB_g, auto748CCDDB_var);
            if (auto748CCDDB_var < 0) { break; }
            if ((GameAttributePlayerValue("1", auto748CCDDB_var) == "0001")) {
                PlayerSetRace(auto748CCDDB_var, "NHbr");
                UISetResourceVisible(PlayerGroupSingle(auto748CCDDB_var), c_resourceTypeTerrazine, true);
            }

            if ((PlayerRace(auto748CCDDB_var) == "NHbr") && (GameAttributePlayerValue("1", auto748CCDDB_var) == "0002")) {
                PlayerSetRace(auto748CCDDB_var, "Terr");
            }

        }
    }
    TriggerExecute(libNHBR_gt_VoidRiftIdleUnits2OnOff, true, false);
    TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
    libNHBR_gf_VoidRiftVariables();
    auto6F144C91_g = PlayerGroupAll();
    auto6F144C91_var = -1;
    while (true) {
        auto6F144C91_var = PlayerGroupNextPlayer(auto6F144C91_g, auto6F144C91_var);
        if (auto6F144C91_var < 0) { break; }
        if ((PlayerRace(auto6F144C91_var) == "NHbr")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuildInProgress", "Activity", auto6F144C91_var, "UI/Generating");
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(0) + "]", auto6F144C91_var, 0.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(1) + "]", auto6F144C91_var, 0.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(2) + "]", auto6F144C91_var, 0.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(3) + "]", auto6F144C91_var, 0.0);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("ShieldWall"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("PunisherGrenades"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("Stimpack"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("PersonalCloaking"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("HighCapacityBarrels"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("SmartServos"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("CycloneLockOnDamageUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("DrillClaws"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("MedivacIncreaseSpeedBoost"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("BansheeCloak"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("BansheeSpeed"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("LiberatorAGRangeUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("BattlecruiserEnableSpecializations"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("zerglingmovementspeed"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("zerglingattackspeed"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("CentrificalHooks"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("GlialReconstitution"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("TunnelingClaws"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("hydraliskspeed"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("ChitinousPlating"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("AnabolicSynthesis"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("Charge"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("BlinkTech"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("AdeptPiercingAttack"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("PsiStormTech"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("DarkTemplarBlinkUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("ExtendedThermalLance"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("PhoenixRangeUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("VoidRaySpeedUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("TempestGroundAttackUpgrade"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("ObserverGraviticBooster"), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6F144C91_var, ("ProtossShieldsLevel1"), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_MapInit_Init () {
    libNHBR_gt_MapInit = TriggerCreate("libNHBR_gt_MapInit_Func");
    TriggerAddEventMapInit(libNHBR_gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Idle Units 2 On/Off
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidRiftIdleUnits2OnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto31267F4C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto31267F4C_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto31267F4C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerRace(lv_itPlayer) == "NHbr")) {
            TriggerEnable(libNHBR_gt_VoidRiftIdleUnits, true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidRiftIdleUnits2OnOff_Init () {
    libNHBR_gt_VoidRiftIdleUnits2OnOff = TriggerCreate("libNHBR_gt_VoidRiftIdleUnits2OnOff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Offline Testing - Reset Player 2 Resource
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_OfflineTestingResetPlayer2Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(2, c_playerPropVespene, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_OfflineTestingResetPlayer2Resource_Init () {
    libNHBR_gt_OfflineTestingResetPlayer2Resource = TriggerCreate("libNHBR_gt_OfflineTestingResetPlayer2Resource_Func");
    TriggerEnable(libNHBR_gt_OfflineTestingResetPlayer2Resource, false);
    TriggerAddEventTimePeriodic(libNHBR_gt_OfflineTestingResetPlayer2Resource, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Network Hybrid Race
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_InitializeNetworkHybridRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB09074D1_g;
    int autoB09074D1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB09074D1_g = PlayerGroupAll();
    autoB09074D1_var = -1;
    while (true) {
        autoB09074D1_var = PlayerGroupNextPlayer(autoB09074D1_g, autoB09074D1_var);
        if (autoB09074D1_var < 0) { break; }
        if ((PlayerRace(autoB09074D1_var) == "NHbr")) {
            TechTreeUpgradeAddLevel(autoB09074D1_var, "NHbrSpray", 1);
        }

    }
    UnitEventSetNullVariableInvalid(true);
    TriggerExecute(libNHBR_gt_HybridTimeScaleBuffInitialization, true, false);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted, true);
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted, true);
    TriggerExecute(libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization, true, false);
    TriggerEnable(libNHBR_gt_HybridProtectionUpdateArmorDataProperty, true);
    TriggerEnable(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty, true);
    TriggerEnable(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2, true);
    TriggerEnable(libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator, true);
    TriggerEnable(libNHBR_gt_HybridReaverUpgradeToAdvancedReaver, true);
    TriggerEnable(libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_InitializeNetworkHybridRace_Init () {
    libNHBR_gt_InitializeNetworkHybridRace = TriggerCreate("libNHBR_gt_InitializeNetworkHybridRace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Build Controller
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridBuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minion;
    int lv_owner;
    point lv_targetPoint;
    unit lv_targetUnit;
    order lv_order;
    order lv_buildOrder;
    order lv_closestBuildOrder;
    order[libNHBR_gv_hybridBuildControllerMaxOrderCount_C + 1] lv_orderList;
    int lv_itOrder;
    int lv_closestBuildIndex;
    int lv_minionOrderCount;
    bool lv_pointVisible;
    order[libNHBR_gv_hybridBuildControllerMaxOrderCount_C + 1] lv_reservedOrders;
    int lv_unusedBuildIndex;
    int lv_lastMoveOrder;
    int lv_lastMoveOrder2;

    // Automatic Variable Declarations
    int auto9E753944_ae;
    const int auto9E753944_ai = 1;
    int auto23CF93A5_ae;
    const int auto23CF93A5_ai = 1;
    const int auto6F826B1E_ae = libNHBR_gv_hybridBuildControllerMaxOrderCount_C;
    const int auto6F826B1E_ai = 1;
    int autoFCE0C0D4_ae;
    const int autoFCE0C0D4_ai = 1;
    int auto5FF4A042_ae;
    const int auto5FF4A042_ai = 1;
    int autoCAB908FE_ae;
    const int autoCAB908FE_ai = 1;
    const int autoF7C90385_ae = libNHBR_gv_hybridBuildControllerMaxOrderCount_C;
    int autoF7C90385_var;
    const int autoB43DB405_ae = libNHBR_gv_hybridBuildControllerMaxOrderCount_C;
    int autoB43DB405_var;
    int autoC094DA9D_ae;
    const int autoC094DA9D_ai = 1;
    int auto9368AED2_ae;
    const int auto9368AED2_ai = 1;
    int autoEE8C50F4_ae;
    const int autoEE8C50F4_ai = 1;
    int autoC8F0D98E_ae;
    const int autoC8F0D98E_ai = 1;
    int auto409B685D_ae;
    const int auto409B685D_ai = 1;
    int auto50320FB2_ae;
    const int auto50320FB2_ai = 1;
    int auto4477E272_ae;
    const int auto4477E272_ai = 1;
    const int auto86A4AA17_ae = libNHBR_gv_hybridBuildControllerMaxOrderCount_C;
    const int auto86A4AA17_ai = 1;

    // Variable Initialization
    lv_minion = EventUnit();
    lv_owner = UnitGetOwner(lv_minion);
    lv_buildOrder = EventUnitOrder();
    lv_closestBuildIndex = -1;
    lv_unusedBuildIndex = -1;
    lv_lastMoveOrder = -1;
    lv_lastMoveOrder2 = -1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "NHbrMinionBuild@InProgress") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "NHbrMinionBuild@InProgress", EventUnit(), 1);
    lv_buildOrder = EventUnitOrder();
    if ((OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint)) {
        lv_targetPoint = OrderGetTargetPoint(lv_buildOrder);
    }
    else {
        lv_targetUnit = OrderGetTargetUnit(lv_buildOrder);
        lv_targetPoint = UnitGetPosition(lv_targetUnit);
    }
    while (((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("ProbeHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("ProbeHarvest", 1)))) {
        Wait(0.0, c_timeGame);
    }
    lv_minionOrderCount = UnitOrderCount(lv_minion);
    auto9E753944_ae = (lv_minionOrderCount-1);
    lv_itOrder = 0;
    for ( ; ( (auto9E753944_ai >= 0 && lv_itOrder <= auto9E753944_ae) || (auto9E753944_ai < 0 && lv_itOrder >= auto9E753944_ae) ) ; lv_itOrder += auto9E753944_ai ) {
        lv_orderList[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        libNHBR_gv_dEBUGOrderListBefore[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        if ((lv_closestBuildIndex == -1) && (lv_orderList[lv_itOrder] == lv_buildOrder)) {
            lv_closestBuildIndex = lv_itOrder;
            lv_buildOrder = lv_orderList[lv_closestBuildIndex];
            if ((OrderGetTargetType(lv_buildOrder) == c_orderTargetPoint)) {
                lv_targetUnit = null;
                lv_targetPoint = OrderGetTargetPoint(lv_buildOrder);
            }
            else {
                lv_targetUnit = OrderGetTargetUnit(lv_buildOrder);
                lv_targetPoint = UnitGetPosition(lv_targetUnit);
            }
        }

    }
    auto23CF93A5_ae = (lv_minionOrderCount-1);
    lv_itOrder = 0;
    for ( ; ( (auto23CF93A5_ai >= 0 && lv_itOrder <= auto23CF93A5_ae) || (auto23CF93A5_ai < 0 && lv_itOrder >= auto23CF93A5_ae) ) ; lv_itOrder += auto23CF93A5_ai ) {
        if ((lv_itOrder == 0) && (lv_itOrder != lv_closestBuildIndex)) {
            if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                if ((lv_targetUnit == null)) {
                    UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueReplace);
                }
            }
            else {
                UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
            }
        }
        else if ((lv_itOrder == lv_closestBuildIndex)) {
            if ((lv_itOrder == 0)) {
                if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                    }
                }
                else {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                }
            }
            else {
                if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                    }
                }
                else {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                }
            }
        }
        else if ((lv_itOrder != 0) && (lv_itOrder != lv_closestBuildIndex)) {
            if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                    UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                }
            }
            else {
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
            }
        }
    }
    while (true) {
        if (((UnitHasBehavior2(lv_minion, "NHbrMinionBuild@InProgress") == false) || (UnitIsAlive(lv_minion) == false) || (libNHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex(lv_minion) == -1))) {
            UnitBehaviorRemove(lv_minion, "NHbrMinionBuild@InProgress", 1);
            return true;
        }

        lv_itOrder = 0;
        for ( ; ( (auto6F826B1E_ai >= 0 && lv_itOrder <= auto6F826B1E_ae) || (auto6F826B1E_ai < 0 && lv_itOrder >= auto6F826B1E_ae) ) ; lv_itOrder += auto6F826B1E_ai ) {
            lv_orderList[lv_itOrder] = null;
            libNHBR_gv_dEBUGOrderListAfter[lv_itOrder] = null;
        }
        lv_minionOrderCount = (UnitOrderCount(lv_minion)-1);
        autoFCE0C0D4_ae = lv_minionOrderCount;
        lv_itOrder = 0;
        for ( ; ( (autoFCE0C0D4_ai >= 0 && lv_itOrder <= autoFCE0C0D4_ae) || (autoFCE0C0D4_ai < 0 && lv_itOrder >= autoFCE0C0D4_ae) ) ; lv_itOrder += autoFCE0C0D4_ai ) {
            lv_orderList[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
            libNHBR_gv_dEBUGOrderListAfter[lv_itOrder] = lv_orderList[lv_itOrder];
        }
        lv_closestBuildIndex = libNHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex(lv_minion);
        lv_buildOrder = lv_orderList[lv_closestBuildIndex];
        lv_targetPoint = OrderGetTargetPosition(lv_buildOrder);
        if ((((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true) && (UnitPathableToPoint(lv_minion, lv_targetPoint, (libNHBR_gv_hybridBuildControllerRange + libNHBR_gf_HybridBuildControllerReturnBuildUnitRadius(lv_orderList[0])), 65535.0) == false)) || ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == false) && (UnitPathableToPoint(lv_minion, lv_targetPoint, 2.0, 65535.0) == false))) && ((lv_closestBuildIndex == 0) || ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(lv_orderList[0]) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(lv_orderList[0]) == OrderGetTargetPosition(lv_orderList[lv_closestBuildIndex]))))) {
            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitBehaviorRemove(lv_minion, "NHbrMinionBuild@InProgress", 1);
            return true;
        }

        auto5FF4A042_ae = (libNHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
        lv_itOrder = 0;
        for ( ; ( (auto5FF4A042_ai >= 0 && lv_itOrder <= auto5FF4A042_ae) || (auto5FF4A042_ai < 0 && lv_itOrder >= auto5FF4A042_ae) ) ; lv_itOrder += auto5FF4A042_ai ) {
            if ((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder+1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder+1))))) {
                lv_lastMoveOrder = lv_itOrder;
            }

        }
        if ((lv_lastMoveOrder != -1)) {
            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            autoCAB908FE_ae = lv_minionOrderCount;
            lv_itOrder = (lv_lastMoveOrder+1);
            for ( ; ( (autoCAB908FE_ai >= 0 && lv_itOrder <= autoCAB908FE_ae) || (autoCAB908FE_ai < 0 && lv_itOrder >= autoCAB908FE_ae) ) ; lv_itOrder += autoCAB908FE_ai ) {
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
            }
            lv_lastMoveOrder = -1;
        }

        if (((lv_closestBuildIndex == 0) || (lv_closestBuildIndex == 1))) {
            libNHBR_gv_dEBUGFirstOrder = UnitOrder(lv_minion, 0);
            if ((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0))) {
                if ((CliffLevel(UnitGetPosition(lv_minion)) >= CliffLevel(lv_targetPoint))) {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, 1)))) {
                        UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitIssueOrder(lv_minion, lv_buildOrder, c_orderQueueReplace);
                        auto9368AED2_ae = lv_minionOrderCount;
                        lv_itOrder = (lv_closestBuildIndex+1);
                        for ( ; ( (auto9368AED2_ai >= 0 && lv_itOrder <= auto9368AED2_ae) || (auto9368AED2_ai < 0 && lv_itOrder >= auto9368AED2_ae) ) ; lv_itOrder += auto9368AED2_ai ) {
                            if ((libNHBR_gf_HybridBuildControllerIsBuildOrderMain(lv_orderList[lv_itOrder]) == true)) {
                                if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                                    if ((lv_itOrder > 0) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder-1))) == OrderGetTargetPosition(UnitOrder(lv_minion, lv_itOrder)))) {
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                }

                                if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                                else {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                            }
                            else {
                                if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                }
                                else {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                            }
                        }
                    }

                }
                else {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, 1)))) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_buildOrder, c_orderQueueReplace);
                            autoC094DA9D_ae = lv_minionOrderCount;
                            lv_itOrder = (lv_closestBuildIndex+1);
                            for ( ; ( (autoC094DA9D_ai >= 0 && lv_itOrder <= autoC094DA9D_ae) || (autoC094DA9D_ai < 0 && lv_itOrder >= autoC094DA9D_ae) ) ; lv_itOrder += autoC094DA9D_ai ) {
                                if ((libNHBR_gf_HybridBuildControllerIsBuildOrderMain(lv_orderList[lv_itOrder]) == true)) {
                                    if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                                        if ((lv_itOrder > 0) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder-1))) == OrderGetTargetPosition(UnitOrder(lv_minion, lv_itOrder)))) {
                                        }
                                        else {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                    }

                                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                }
                                else {
                                    if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                                        if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                }
                            }
                        }
                        else {
                            if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == OrderGetTargetPosition(lv_buildOrder))) {
                            }
                            else {
                                autoF7C90385_var = 0;
                                for ( ; autoF7C90385_var <= autoF7C90385_ae; autoF7C90385_var += 1 ) {
                                    lv_reservedOrders[autoF7C90385_var] = UnitOrder(lv_minion, autoF7C90385_var);
                                }
                                UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                                autoB43DB405_var = 0;
                                for ( ; autoB43DB405_var <= autoB43DB405_ae; autoB43DB405_var += 1 ) {
                                    if ((lv_closestBuildIndex == autoB43DB405_var)) {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_buildOrder)), c_orderQueueAddToEnd);
                                    }

                                    UnitIssueOrder(lv_minion, lv_reservedOrders[autoB43DB405_var], c_orderQueueAddToEnd);
                                }
                            }
                        }
                    }

                }
            }
            else {
                if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == false)) {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == OrderGetTargetPosition(lv_buildOrder))) {
                    }
                    else {
                        if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                            auto50320FB2_ae = (libNHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
                            lv_itOrder = 0;
                            for ( ; ( (auto50320FB2_ai >= 0 && lv_itOrder <= auto50320FB2_ae) || (auto50320FB2_ai < 0 && lv_itOrder >= auto50320FB2_ae) ) ; lv_itOrder += auto50320FB2_ai ) {
                                lv_reservedOrders[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
                            }
                            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            auto4477E272_ae = (libNHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
                            lv_itOrder = 0;
                            for ( ; ( (auto4477E272_ai >= 0 && lv_itOrder <= auto4477E272_ae) || (auto4477E272_ai < 0 && lv_itOrder >= auto4477E272_ae) ) ; lv_itOrder += auto4477E272_ai ) {
                                if ((lv_closestBuildIndex == lv_itOrder)) {
                                    UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_buildOrder)), c_orderQueueAddToEnd);
                                }

                                UnitIssueOrder(lv_minion, lv_reservedOrders[lv_itOrder], c_orderQueueAddToEnd);
                            }
                        }

                    }
                }
                else {
                    autoEE8C50F4_ae = lv_minionOrderCount;
                    lv_itOrder = (lv_closestBuildIndex+1);
                    for ( ; ( (autoEE8C50F4_ai >= 0 && lv_itOrder <= autoEE8C50F4_ae) || (autoEE8C50F4_ai < 0 && lv_itOrder >= autoEE8C50F4_ae) ) ; lv_itOrder += autoEE8C50F4_ai ) {
                        if ((libNHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                            lv_unusedBuildIndex = lv_itOrder;
                            break;
                        }

                    }
                    if ((lv_unusedBuildIndex != -1)) {
                        UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        autoC8F0D98E_ae = (lv_unusedBuildIndex-1);
                        lv_itOrder = 0;
                        for ( ; ( (autoC8F0D98E_ai >= 0 && lv_itOrder <= autoC8F0D98E_ae) || (autoC8F0D98E_ai < 0 && lv_itOrder >= autoC8F0D98E_ae) ) ; lv_itOrder += autoC8F0D98E_ai ) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        if ((OrderGetTargetType(lv_orderList[lv_unusedBuildIndex]) == c_orderTargetPoint)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_unusedBuildIndex]), OrderGetTargetPoint(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(OrderGetTargetUnit(lv_orderList[lv_unusedBuildIndex]))), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libNHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_unusedBuildIndex]), OrderGetTargetUnit(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                        }
                        auto409B685D_ae = lv_minionOrderCount;
                        lv_itOrder = (lv_unusedBuildIndex+1);
                        for ( ; ( (auto409B685D_ai >= 0 && lv_itOrder <= auto409B685D_ae) || (auto409B685D_ai < 0 && lv_itOrder >= auto409B685D_ae) ) ; lv_itOrder += auto409B685D_ai ) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        lv_unusedBuildIndex = -1;
                    }

                }
            }
        }

        lv_itOrder = 0;
        for ( ; ( (auto86A4AA17_ai >= 0 && lv_itOrder <= auto86A4AA17_ae) || (auto86A4AA17_ai < 0 && lv_itOrder >= auto86A4AA17_ae) ) ; lv_itOrder += auto86A4AA17_ai ) {
            libNHBR_gv_dEBUGOrderListAfter[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        }
        Wait(0.0, c_timeGame);
    }
    UnitBehaviorRemove(lv_minion, "NHbrMinionBuild@InProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridBuildController_Init () {
    libNHBR_gt_HybridBuildController = TriggerCreate("libNHBR_gt_HybridBuildController_Func");
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 1));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 4));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 17));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 16));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 10));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 9));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 0));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 8));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 5));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 11));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 12));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 6));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 13));
    TriggerAddEventUnitOrder(libNHBR_gt_HybridBuildController, null, AbilityCommand("NHbrMinionBuild", 2));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Network New - Calculate
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNetworkNewCalculate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_powerSource;
    int lv_chargedAmount;
    int lv_nonChargedAmount;
    unitgroup lv_powerSources;
    int lv_itPowerSourceUnitType;

    // Automatic Variable Declarations
    const int auto22AB836C_ae = libNHBR_gv_hybridNetworkPowerSourceUnitTypeMaxCount_C;
    const int auto22AB836C_ai = 1;
    unitgroup auto403B34CA_g;
    int auto403B34CA_u;
    unit auto403B34CA_var;
    unitgroup auto194BCFF4_g;
    int auto194BCFF4_u;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_powerSource = EventUnit();
    lv_powerSources = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPowerSourceUnitType = 1;
    for ( ; ( (auto22AB836C_ai >= 0 && lv_itPowerSourceUnitType <= auto22AB836C_ae) || (auto22AB836C_ai < 0 && lv_itPowerSourceUnitType >= auto22AB836C_ae) ) ; lv_itPowerSourceUnitType += auto22AB836C_ai ) {
        auto403B34CA_g = UnitGroup(libNHBR_gv_hybridNetworkPowerSourceUnitType[lv_itPowerSourceUnitType], lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto403B34CA_u = UnitGroupCount(auto403B34CA_g, c_unitCountAll);
        for (;; auto403B34CA_u -= 1) {
            auto403B34CA_var = UnitGroupUnitFromEnd(auto403B34CA_g, auto403B34CA_u);
            if (auto403B34CA_var == null) { break; }
            UnitGroupAdd(lv_powerSources, auto403B34CA_var);
        }
    }
    libNHBR_gv_hybridNetworkNewPowerSourceUnitGroup[lv_player] = lv_powerSources;
    auto194BCFF4_g = lv_powerSources;
    auto194BCFF4_u = UnitGroupCount(auto194BCFF4_g, c_unitCountAll);
    for (;; auto194BCFF4_u -= 1) {
        lv_powerSource = UnitGroupUnitFromEnd(auto194BCFF4_g, auto194BCFF4_u);
        if (lv_powerSource == null) { break; }
        if ((UnitHasBehavior2(lv_powerSource, "NHbrNetworkCharging@Charged") == true)) {
            lv_chargedAmount += 1;
        }
        else {
            lv_nonChargedAmount += 1;
        }
    }
    if ((lv_chargedAmount > libNHBR_gv_hybridNetworkMaximumPowerSourcesInNetwork)) {
        libNHBR_gv_hybridNetworkNewCurrentChargedAmount[lv_player] = libNHBR_gv_hybridNetworkMaximumPowerSourcesInNetwork;
    }
    else {
        libNHBR_gv_hybridNetworkNewCurrentChargedAmount[lv_player] = lv_chargedAmount;
    }
    lv_nonChargedAmount = MinI((libNHBR_gv_hybridNetworkMaximumPowerSourcesInNetwork - lv_chargedAmount), lv_nonChargedAmount);
    if ((libNHBR_gv_hybridNetworkNewCurrentChargedAmount[lv_player] > libNHBR_gv_hybridNetworkMaximumPowerSourcesInNetwork)) {
        lv_chargedAmount = libNHBR_gv_hybridNetworkMaximumPowerSourcesInNetwork;
    }
    else {
        lv_chargedAmount = libNHBR_gv_hybridNetworkNewCurrentChargedAmount[lv_player];
    }
    CatalogFieldValueSet(c_gameCatalogAccumulator, ("NHbrNetworkNEW@PowerSourceChargedAdd"), "Amount", lv_player, IntToString(lv_chargedAmount));
    CatalogFieldValueSet(c_gameCatalogAccumulator, ("NHbrNetworkNEW@PowerSourceChargedMultiply"), "Amount", lv_player, IntToString(lv_chargedAmount));
    CatalogFieldValueSet(c_gameCatalogAccumulator, ("NHbrNetworkNEW@PowerSourceNonChargedAdd"), "Amount", lv_player, IntToString(lv_nonChargedAmount));
    CatalogFieldValueSet(c_gameCatalogAccumulator, ("NHbrNetworkNEW@PowerSourceNonChargedMultiply"), "Amount", lv_player, IntToString(lv_nonChargedAmount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNetworkNewCalculate_Init () {
    libNHBR_gt_HybridNetworkNewCalculate = TriggerCreate("libNHBR_gt_HybridNetworkNewCalculate_Func");
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCalculate, null, "NHbrNetworkCharging@Charged", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCalculate, null, "NHbrNetworkCharging@Charged", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCalculate, null, "NHbrNetworkCharging", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCalculate, null, "NHbrNetworkCharging", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Network - Power Source Unit Type Initialization
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itUnitType += 1;
    libNHBR_gv_hybridNetworkPowerSourceUnitType[lv_itUnitType] = "NHbrIonicCrystal";
    lv_itUnitType += 1;
    libNHBR_gv_hybridNetworkPowerSourceUnitType[lv_itUnitType] = "NHbrIonicCrystal@Moveable";
    lv_itUnitType += 1;
    libNHBR_gv_hybridNetworkPowerSourceUnitType[lv_itUnitType] = "NHbrNavigator";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization_Init () {
    libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization = TriggerCreate("libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Network New - Case Controller
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNetworkNewCaseController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Automatic Variable Declarations
    string auto40B2DE4C_val;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitType = UnitGetType(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    auto40B2DE4C_val = lv_unitType;
    if (auto40B2DE4C_val == "NHbrStasisCell") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
            libNHBR_gv_hybridNetworkNewCaseControllerStasisCell[lv_player] += 1;
        }
        else {
            libNHBR_gv_hybridNetworkNewCaseControllerStasisCell[lv_player] -= 1;
        }
        if ((libNHBR_gv_hybridNetworkNewCaseControllerStasisCell[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrStasisCell@StasisCell", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrStasisCell@StasisCell", 0);
        }
    }
    else if (auto40B2DE4C_val == "NHbrProcessingCore") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
            libNHBR_gv_hybridNetworkNewCaseControllerProcessingCore[lv_player] += 1;
        }
        else {
            libNHBR_gv_hybridNetworkNewCaseControllerProcessingCore[lv_player] -= 1;
        }
        if ((libNHBR_gv_hybridNetworkNewCaseControllerProcessingCore[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrProcessingCore", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrProcessingCore", 0);
        }
    }
    else if (auto40B2DE4C_val == "NHbrCrystallicShrine") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
            libNHBR_gv_hybridNetworkNewCaseControllerCrystallicShrine[lv_player] += 1;
        }
        else {
            libNHBR_gv_hybridNetworkNewCaseControllerCrystallicShrine[lv_player] -= 1;
        }
        if ((libNHBR_gv_hybridNetworkNewCaseControllerCrystallicShrine[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrCrystallicShrine", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrCrystallicShrine", 0);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNetworkNewCaseController_Init () {
    libNHBR_gt_HybridNetworkNewCaseController = TriggerCreate("libNHBR_gt_HybridNetworkNewCaseController_Func");
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCaseController, null, "NHbrNetworkNEW@NetworkController", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNHBR_gt_HybridNetworkNewCaseController, null, "NHbrNetworkNEW@NetworkController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Network New - Case Controller (Removed)
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNetworkNewCaseControllerRemoved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Automatic Variable Declarations
    string auto1747BF75_val;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitType = UnitGetType(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    auto1747BF75_val = lv_unitType;
    if (auto1747BF75_val == "NHbrStasisCell") {
        libNHBR_gv_hybridNetworkNewCaseControllerStasisCell[lv_player] -= 1;
        if ((libNHBR_gv_hybridNetworkNewCaseControllerStasisCell[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrStasisCell@StasisCell", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrStasisCell@StasisCell", 0);
        }
    }
    else if (auto1747BF75_val == "NHbrProcessingCore") {
        libNHBR_gv_hybridNetworkNewCaseControllerProcessingCore[lv_player] -= 1;
        if ((libNHBR_gv_hybridNetworkNewCaseControllerProcessingCore[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrProcessingCore", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrProcessingCore", 0);
        }
    }
    else if (auto1747BF75_val == "NHbrCrystallicShrine") {
        libNHBR_gv_hybridNetworkNewCaseControllerCrystallicShrine[lv_player] -= 1;
        if ((libNHBR_gv_hybridNetworkNewCaseControllerCrystallicShrine[lv_player] > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrCrystallicShrine", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NHbrCrystallicShrine", 0);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNetworkNewCaseControllerRemoved_Init () {
    libNHBR_gt_HybridNetworkNewCaseControllerRemoved = TriggerCreate("libNHBR_gt_HybridNetworkNewCaseControllerRemoved_Func");
    TriggerAddEventUnitRemoved(libNHBR_gt_HybridNetworkNewCaseControllerRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Protection - Update Armor Data - Property
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridProtectionUpdateArmorDataProperty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridUnit;
    fixed lv_shieldSpellArmor;
    fixed lv_shields;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybridUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(lv_hybridUnit), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_hybridUnit), "Race", c_playerAny) == "NHbr"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shieldSpellArmor = UnitGetPropertyFixed(lv_hybridUnit, c_unitPropShieldArmor, c_unitPropCurrent);
    lv_shields = UnitGetPropertyFixed(lv_hybridUnit, c_unitPropShields, c_unitPropCurrent);
    if ((lv_shields < lv_shieldSpellArmor)) {
        lv_shieldSpellArmor = lv_shields;
    }

    UnitSetCustomValue(lv_hybridUnit, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_ProtectionSpellArmor), lv_shieldSpellArmor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridProtectionUpdateArmorDataProperty_Init () {
    libNHBR_gt_HybridProtectionUpdateArmorDataProperty = TriggerCreate("libNHBR_gt_HybridProtectionUpdateArmorDataProperty_Func");
    TriggerEnable(libNHBR_gt_HybridProtectionUpdateArmorDataProperty, false);
    TriggerAddEventUnitProperty(libNHBR_gt_HybridProtectionUpdateArmorDataProperty, null, c_unitPropShieldArmor);
    TriggerAddEventUnitRegion(libNHBR_gt_HybridProtectionUpdateArmorDataProperty, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Life Force - Update Armor Data - Property 
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridLifeForceUpdateArmorDataProperty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridUnit;
    fixed lv_lifeArmor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybridUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(lv_hybridUnit), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_hybridUnit), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_hybridUnit), "Race", c_playerAny) == "NHbr"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lifeArmor = MaxF(UnitGetPropertyFixed(lv_hybridUnit, c_unitPropLifeArmor, c_unitPropCurrent), 0.0);
    libNtve_gf_SetBehaviorCount(lv_hybridUnit, "HybridLifeForceSpeedController", lv_hybridUnit, FixedToInt(lv_lifeArmor));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridLifeForceUpdateArmorDataProperty_Init () {
    libNHBR_gt_HybridLifeForceUpdateArmorDataProperty = TriggerCreate("libNHBR_gt_HybridLifeForceUpdateArmorDataProperty_Func");
    TriggerEnable(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty, false);
    TriggerAddEventUnitProperty(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty, null, c_unitPropLifeArmor);
    TriggerAddEventUnitRegion(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Life Force - Update Armor Data - Property  2
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridUnit;
    fixed lv_lifeArmor;

    // Automatic Variable Declarations
    unitgroup auto09F19124_g;
    int auto09F19124_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "NHbrEngineUpgrades@GroundArmorsLevel1") || (EventUpgradeName() == "NHbrEngineUpgrades@GroundArmorsLevel2") || (EventUpgradeName() == "NHbrEngineUpgrades@GroundArmorsLevel3") || (EventUpgradeName() == "NHbrEngineUpgrades@GroundArmorsLevel4") || (EventUpgradeName() == "NHbrEngineUpgrades@GroundWeaponsLevel1") || (EventUpgradeName() == "NHbrEngineUpgrades@WeaponsLevel2") || (EventUpgradeName() == "NHbrEngineUpgrades@WeaponsLevel3") || (EventUpgradeName() == "NHbrEngineUpgrades@WeaponsLevel4")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto09F19124_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09F19124_u = UnitGroupCount(auto09F19124_g, c_unitCountAll);
    for (;; auto09F19124_u -= 1) {
        lv_hybridUnit = UnitGroupUnitFromEnd(auto09F19124_g, auto09F19124_u);
        if (lv_hybridUnit == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_hybridUnit), "Race", c_playerAny) == "NHbr")) {
            lv_lifeArmor = MaxF(UnitGetPropertyFixed(lv_hybridUnit, c_unitPropLifeArmor, c_unitPropCurrent), 0.0);
            libNtve_gf_SetBehaviorCount(lv_hybridUnit, "HybridLifeForceSpeedController", lv_hybridUnit, FixedToInt(lv_lifeArmor));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2_Init () {
    libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2 = TriggerCreate("libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2_Func");
    TriggerEnable(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2, false);
    TriggerAddEventUpgradeLevelChanged(libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Override TP Time
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportOverrideTPTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    string lv_itUnitType;
    int lv_itField;

    // Automatic Variable Declarations
    const int auto9DDEF7EA_ae = libNHBR_gv_bALMaxEnginePlayerCount;
    const int auto9DDEF7EA_ai = 1;
    const int auto7AD4EE7E_ae = 29;
    const int auto7AD4EE7E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (auto9DDEF7EA_ai >= 0 && lv_itPlayer <= auto9DDEF7EA_ae) || (auto9DDEF7EA_ai < 0 && lv_itPlayer >= auto9DDEF7EA_ae) ) ; lv_itPlayer += auto9DDEF7EA_ai ) {
        lv_itField = 0;
        for ( ; ( (auto7AD4EE7E_ai >= 0 && lv_itField <= auto7AD4EE7E_ae) || (auto7AD4EE7E_ai < 0 && lv_itField >= auto7AD4EE7E_ae) ) ; lv_itField += auto7AD4EE7E_ai ) {
            lv_itUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, ("NHbrIonicCrystalTeleport@Build"), "InfoArray[" + IntToString(lv_itField) + "].Unit", c_playerAny));
            if ((lv_itUnitType != null)) {
                CatalogFieldValueSet(c_gameCatalogAbil, ("NHbrIonicCrystalTeleport@Build"), "InfoArray[" + IntToString(lv_itField) + "].Time", lv_itPlayer, FixedToString(libNHBR_gv_hybridTeleportConstructionTime, c_fixedPrecisionAny));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportOverrideTPTime_Init () {
    libNHBR_gt_HybridTeleportOverrideTPTime = TriggerCreate("libNHBR_gt_HybridTeleportOverrideTPTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - dummy Transfer Target Unit
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportdummyTransferTargetUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_targetUnit;
    unit lv_casterUnit;
    string lv_targetUnitType;
    order lv_order;

    // Automatic Variable Declarations
    string auto3445BE97_val;
    unitgroup auto02A78B9C_g;
    int auto02A78B9C_u;
    unit auto02A78B9C_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnitType = UnitGetType(lv_targetUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_casterUnit, c_unitPropEnergy, 100.0);
    libNHBR_gv_hybridTeleportUnitGroup[lv_player] = libNtve_gf_ConvertUnitToUnitGroup(lv_casterUnit);
    libNHBR_gv_hybridTeleportUnit[EventPlayer()] = lv_targetUnit;
    auto3445BE97_val = lv_targetUnitType;
    if (auto3445BE97_val == "NHbrTemple") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportTemple", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 0), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrHarvester") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportHarvester", lv_casterUnit, 1);
        lv_order = OrderTargetingUnit(AbilityCommand("NHbrIonicCrystalTeleport@Build", 1), lv_casterUnit);
    }
    else if (auto3445BE97_val == "NHbrHarvesterRich") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportHarvesterRich", lv_casterUnit, 1);
        lv_order = OrderTargetingUnit(AbilityCommand("NHbrIonicCrystalTeleport@Build", 1), lv_casterUnit);
    }
    else if (auto3445BE97_val == "NHbrVoidRift") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportVoidRift", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 2), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrStasisCell") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportStasisCell", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 3), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrVespeneConcentrator") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConcentrator", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 4), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrConstruct@AntiAir") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConstructAA", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 5), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrConstruct@AntiGround") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConstructAG", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 6), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrEngine") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportEngine", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 7), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrProcessingCore") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportProcessingCore", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 8), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrRevenantKeystone") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportProcessor", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 9), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrVoidPortal") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportVoidPortal", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 10), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrCrystallicShrine") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportCrystallicShrine", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 11), UnitGetPosition(lv_casterUnit));
    }
    else if (auto3445BE97_val == "NHbrNemesisCatacomb") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportNemesisCatacomb", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 12), UnitGetPosition(lv_casterUnit));
    }
    else {
    }
    if ((lv_order != null)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_player), libNHBR_gv_hybridTeleportUnitGroup[lv_player], lv_order, false);
        auto02A78B9C_g = libNHBR_gv_hybridNetworkNewPowerSourceUnitGroup[lv_player];
        auto02A78B9C_u = UnitGroupCount(auto02A78B9C_g, c_unitCountAll);
        for (;; auto02A78B9C_u -= 1) {
            auto02A78B9C_var = UnitGroupUnitFromEnd(auto02A78B9C_g, auto02A78B9C_u);
            if (auto02A78B9C_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto02A78B9C_var, "StatusIncrement Placement");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportdummyTransferTargetUnit_Init () {
    libNHBR_gt_HybridTeleportdummyTransferTargetUnit = TriggerCreate("libNHBR_gt_HybridTeleportdummyTransferTargetUnit_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_HybridTeleportdummyTransferTargetUnit, c_playerAny, "IonicCrystaldummytransferingunitApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - dummy Move Transfer Target Unit
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_targetUnitPoint;
    unit lv_targetUnit;
    unit lv_casterUnit;
    unit lv_sourceUnit;
    string lv_targetUnitType;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_targetUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sourceUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_targetUnitType = UnitGetType(lv_targetUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = libNHBR_gv_hybridTeleportUnit[EventPlayer()];
    UnitBehaviorRemove(lv_targetUnit, "IonicCrystaldummytargetunit", 1);
    UnitBehaviorRemove(lv_casterUnit, "IonicCrystaldummytransferingunit", 1);
    UnitSetPosition(lv_targetUnit, lv_targetUnitPoint, false);
    UnitBehaviorAdd(lv_targetUnit, "NHbrIonicCrystalTeleport@BuilderSilence", lv_targetUnit, 1);
    UnitBehaviorSetDuration(lv_targetUnit, "NHbrIonicCrystalTeleport@BuilderSilence", 5.0);
    UnitSetPropertyFixed(lv_casterUnit, c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) * 0.5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit_Init () {
    libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit = TriggerCreate("libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit, c_playerAny, "IonicCrystalTeleportdummydamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Turn Targeting Order On
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportTurnTargetingOrderOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_targetUnit;
    unit lv_casterUnit;
    string lv_targetUnitType;
    order lv_order;

    // Automatic Variable Declarations
    string autoC94CA30A_val;
    unitgroup auto961471E1_g;
    int auto961471E1_u;
    unit auto961471E1_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnitType = UnitGetType(lv_targetUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_casterUnit, c_unitPropEnergy, 100.0);
    libNHBR_gv_hybridTeleportUnitGroup[lv_player] = libNtve_gf_ConvertUnitToUnitGroup(lv_casterUnit);
    UnitBehaviorAdd(lv_casterUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", lv_targetUnit, 1);
    UnitBehaviorAdd(lv_targetUnit, "NHbrIonicCrystalTeleport@FromPylonToTarget", lv_casterUnit, 1);
    autoC94CA30A_val = lv_targetUnitType;
    if (autoC94CA30A_val == "NHbrTemple") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportTemple", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 0), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrHarvester") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportHarvester", lv_casterUnit, 1);
        lv_order = OrderTargetingUnit(AbilityCommand("NHbrIonicCrystalTeleport@Build", 1), lv_casterUnit);
    }
    else if (autoC94CA30A_val == "NHbrHarvesterRich") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportHarvesterRich", lv_casterUnit, 1);
        lv_order = OrderTargetingUnit(AbilityCommand("NHbrIonicCrystalTeleport@Build", 1), lv_casterUnit);
    }
    else if (autoC94CA30A_val == "NHbrVoidRift") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportVoidRift", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 2), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrStasisCell") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportStasisCell", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 3), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrVespeneConcentrator") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConcentrator", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 4), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrConstruct@AntiAir") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConstructAA", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 5), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrConstruct@AntiGround") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportConstructAG", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 6), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrEngine") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportEngine", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 7), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrProcessingCore") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportProcessingCore", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 8), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrRevenantKeystone") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportProcessor", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 9), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrVoidPortal") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportVoidPortal", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 10), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrCrystallicShrine") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportCrystallicShrine", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 11), UnitGetPosition(lv_casterUnit));
    }
    else if (autoC94CA30A_val == "NHbrNemesisCatacomb") {
        UnitBehaviorAdd(lv_casterUnit, "NHbr@TeleportNemesisCatacomb", lv_casterUnit, 1);
        lv_order = OrderTargetingPoint(AbilityCommand("NHbrIonicCrystalTeleport@Build", 12), UnitGetPosition(lv_casterUnit));
    }
    else {
    }
    if ((lv_order != null)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_player), libNHBR_gv_hybridTeleportUnitGroup[lv_player], lv_order, false);
        auto961471E1_g = libNHBR_gv_hybridNetworkNewPowerSourceUnitGroup[lv_player];
        auto961471E1_u = UnitGroupCount(auto961471E1_g, c_unitCountAll);
        for (;; auto961471E1_u -= 1) {
            auto961471E1_var = UnitGroupUnitFromEnd(auto961471E1_g, auto961471E1_u);
            if (auto961471E1_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto961471E1_var, "StatusIncrement Placement");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportTurnTargetingOrderOn_Init () {
    libNHBR_gt_HybridTeleportTurnTargetingOrderOn = TriggerCreate("libNHBR_gt_HybridTeleportTurnTargetingOrderOn_Func");
    TriggerEnable(libNHBR_gt_HybridTeleportTurnTargetingOrderOn, false);
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_HybridTeleportTurnTargetingOrderOn, c_playerAny, "NHbrIonicCrystalTeleport@CrystalInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Turn Targeting Order Off
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportTurnTargetingOrderOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_crystal;
    unit lv_builder;
    fixed lv_energyToRemove;
    fixed lv_totalBuildTime;
    fixed lv_energyUsage;

    // Automatic Variable Declarations
    unitgroup auto19A3CA45_g;
    int auto19A3CA45_u;
    unit auto19A3CA45_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_crystal = UnitGroupUnit(libNHBR_gv_hybridTeleportUnitGroup[lv_player], 1);
    lv_builder = UnitBehaviorEffectUnit(lv_crystal, "NHbrIonicCrystalTeleport@FromTargetToCrystal", c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportConcentrator", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportConstructAA", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportConstructAG", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportCrystallicShrine", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportEngine", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportHarvester", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportHarvesterRich", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportNemesisCatacomb", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportProcessingCore", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportProcessor", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportStasisCell", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportTemple", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportVoidPortal", 1);
    UnitBehaviorRemove(lv_crystal, "NHbr@TeleportVoidRift", 1);
    UnitBehaviorRemove(libNHBR_gv_hybridTeleportUnit[lv_player], "IonicCrystaldummytargetunit", 1);
    UnitBehaviorRemove(lv_crystal, "IonicCrystaldummytransferingunit", 1);
    auto19A3CA45_g = libNHBR_gv_hybridNetworkNewPowerSourceUnitGroup[lv_player];
    auto19A3CA45_u = UnitGroupCount(auto19A3CA45_g, c_unitCountAll);
    for (;; auto19A3CA45_u -= 1) {
        auto19A3CA45_var = UnitGroupUnitFromEnd(auto19A3CA45_g, auto19A3CA45_u);
        if (auto19A3CA45_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto19A3CA45_var, "StatusDecrement Placement");
    }
    if ((OrderGetAbilityCommand(UnitOrder(lv_crystal, 0)) != EventTargetModeAbilCmd())) {
        UnitBehaviorRemove(lv_crystal, "NHbrIonicCrystalTeleport@FromTargetToCrystal", 1);
        UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@FromPylonToTarget", 1);
    }

    libNHBR_gv_hybridTeleportUnit[lv_player] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportTurnTargetingOrderOff_Init () {
    libNHBR_gt_HybridTeleportTurnTargetingOrderOff = TriggerCreate("libNHBR_gt_HybridTeleportTurnTargetingOrderOff_Func");
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 4), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 5), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 10), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 6), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 11), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 7), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 8), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 2), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 3), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 9), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libNHBR_gt_HybridTeleportTurnTargetingOrderOff, c_playerAny, AbilityCommand("NHbrIonicCrystalTeleport@Build", 1), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Construction Progress Ionic FakeBuild Cancel
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ionicCrystalUnit;
    unit lv_targetStructure;
    int lv_owner;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ionicCrystalUnit = EventUnit();
    lv_targetStructure = EventUnitProgressUnit();
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_ionicCrystalUnit) == "NHbrIonicCrystal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    UnitIssueOrder(lv_ionicCrystalUnit, Order(AbilityCommand("BuildInProgress", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_targetStructure, Order(AbilityCommand("BuildInProgress", 0)), c_orderQueueReplace);
    lv_targetStructure = libNHBR_gv_hybridTeleportUnit[EventPlayer()];
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel_Init () {
    libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel = TriggerCreate("libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel_Func");
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Construction Progress
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportConstructionProgress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;
    unit lv_builder;
    unit lv_ionicCrystalUnit;
    fixed lv_energyUsage;
    fixed lv_drainedEnergyValue;
    bool lv_builderIsStructure;
    fixed lv_progress;
    fixed lv_totalBuildTime;
    fixed lv_oldProgress;
    point lv_targetPoint;
    bool[10] lv_inControlGroup;
    int lv_owner;
    int lv_killsCount;

    // Automatic Variable Declarations
    const int auto0A044625_n = 5;
    int auto0A044625_i;
    const int auto4B532101_ae = 9;
    int auto4B532101_var;
    const int auto62C7905C_ae = 9;
    int auto62C7905C_var;

    // Variable Initialization
    lv_ionicCrystalUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("PlayerIsNHbr", lv_ionicCrystalUnit, lv_ionicCrystalUnit) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_ionicCrystalUnit) == "NHbrIonicCrystal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(EventUnit());
    lv_builder = UnitBehaviorEffectUnit(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_ionicCrystalUnit, 1);
    UnitBehaviorAdd(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_builder, 1);
    for (auto0A044625_i = 1; auto0A044625_i <= auto0A044625_n; auto0A044625_i += 1) {
        UnitIssueOrder(lv_builder, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    }
    lv_targetStructure = EventUnitProgressUnit();
    lv_targetPoint = UnitGetPosition(lv_targetStructure);
    UnitBehaviorAdd(lv_targetStructure, "NHbrIonicCrystalTeleport@Invulnerability", lv_builder, 1);
    UnitBehaviorAdd(lv_builder, "NHbrIonicCrystalTeleport@BuilderSilence", lv_builder, 1);
    UnitSetCustomValue(lv_ionicCrystalUnit, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_ionicCrystalUnit, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    lv_energyUsage = UnitGetPropertyFixed(lv_ionicCrystalUnit, c_unitPropEnergyMax, c_unitPropCurrent);
    lv_totalBuildTime = libNHBR_gv_hybridTeleportConstructionTime;
    lv_drainedEnergyValue = ((lv_energyUsage/lv_totalBuildTime)/32);
    UnitSetCustomValue(lv_ionicCrystalUnit, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), lv_drainedEnergyValue);
    UnitCreateEffectUnit(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@PersistentBuilder", lv_builder);
    libNtve_gf_SendActorMessageToUnit(lv_builder, "SetOpacity 0.650000 3.000000");
    while (true) {
        Wait(0.0, c_timeGame);
        lv_oldProgress = lv_progress;
        lv_progress = UnitOrderGetProgress(lv_ionicCrystalUnit);
        UnitSetPropertyFixed(lv_targetStructure, c_unitPropLife, UnitGetPropertyFixed(lv_builder, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_targetStructure, c_unitPropShields, UnitGetPropertyFixed(lv_builder, c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_targetStructure, c_unitPropEnergy, UnitGetPropertyFixed(lv_builder, c_unitPropEnergy, c_unitPropCurrent));
        UnitCreateEffectUnit(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@DrainingEnergy", lv_ionicCrystalUnit);
        if ((UnitOrderGetProgress(lv_ionicCrystalUnit) == 100.0)) {
            if (((lv_progress - lv_oldProgress) > 1.0)) {
                UnitBehaviorRemove(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
                UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@FromPylonToTarget", 1);
                UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@BuilderSilence", 1);
                UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
                UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", 1);
                break;
            }
            else {
                if ((UnitIsAlive(lv_ionicCrystalUnit) == true)) {
                    UnitBehaviorRemove(lv_builder, "NHbrTemple@Supplies", 1);
                    auto4B532101_var = 0;
                    for ( ; auto4B532101_var <= auto4B532101_ae; auto4B532101_var += 1 ) {
                        lv_inControlGroup[auto4B532101_var] = (UnitGroupHasUnit(UnitControlGroup(lv_owner, auto4B532101_var), lv_builder) == true);
                    }
                    UnitBehaviorRemove(lv_targetStructure, "NHbrIonicCrystalTeleport@Invulnerability", 1);
                    UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
                    UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", 1);
                    UnitBehaviorAdd(lv_builder, "NHbrIonicCrystalTeleport@FadeBuff", lv_builder, 1);
                    auto62C7905C_var = 0;
                    for ( ; auto62C7905C_var <= auto62C7905C_ae; auto62C7905C_var += 1 ) {
                        if ((lv_inControlGroup[auto62C7905C_var] == true)) {
                            UnitControlGroupAddUnit(lv_owner, auto62C7905C_var, lv_targetStructure);
                        }

                    }

                    return true;
                }
                else {
                    UnitBehaviorRemove(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
                    UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@FromPylonToTarget", 1);
                    UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@BuilderSilence", 1);
                    break;
                }
            }
        }

        if ((UnitIsAlive(lv_builder) == false)) {
            UnitCreateEffectUnit(lv_targetStructure, "NHbrIonicCrystalTeleport@Suicide", lv_targetStructure);
            UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
            UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", 1);
            return true;
        }

        if ((UnitIsAlive(lv_targetStructure) == false)) {
            UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
            UnitBehaviorRemove(lv_ionicCrystalUnit, "NHbrIonicCrystalTeleport@FromTargetToCrystal", 1);
            UnitBehaviorRemove(lv_builder, "NHbrIonicCrystalTeleport@FromPylonToTarget", 1);
            UnitBehaviorRemove(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
            break;
        }

    }
    libNtve_gf_SendActorMessageToUnit(lv_builder, "SetOpacity 1.000000 3.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportConstructionProgress_Init () {
    libNHBR_gt_HybridTeleportConstructionProgress = TriggerCreate("libNHBR_gt_HybridTeleportConstructionProgress_Func");
    TriggerEnable(libNHBR_gt_HybridTeleportConstructionProgress, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTeleportConstructionProgress, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Transfer Damage
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTeleportTransferDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    fixed lv_damage;
    fixed lv_shields;
    fixed lv_life;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_builder = UnitBehaviorEffectUnit(EventUnit(), "NHbrIonicCrystalTeleport@Invulnerability", c_effectUnitCaster, 0);
    lv_damage = EventUnitDamageAbsorbed();
    lv_shields = UnitGetPropertyFixed(lv_builder, c_unitPropShields, c_unitPropCurrent);
    lv_life = UnitGetPropertyFixed(lv_builder, c_unitPropLife, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_life + lv_shields) > lv_damage)) {
        UnitSetPropertyFixed(lv_builder, c_unitPropShields, (lv_shields - lv_damage));
        UnitSetPropertyFixed(lv_builder, c_unitPropLife, (lv_life + MinF(0.0, (lv_shields - lv_damage))));
    }
    else {
        UnitSetPropertyFixed(lv_builder, c_unitPropLife, (lv_life - lv_damage));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTeleportTransferDamage_Init () {
    libNHBR_gt_HybridTeleportTransferDamage = TriggerCreate("libNHBR_gt_HybridTeleportTransferDamage_Func");
    TriggerAddEventUnitDamageAbsorbed(libNHBR_gt_HybridTeleportTransferDamage, null, "NHbrIonicCrystalTeleport@Invulnerability");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Initialization
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itBuff;
    string lv_buffID;

    // Automatic Variable Declarations
    const int auto49935673_ae = libNHBR_gv_hybridTimeScaleBuffMaxScale_C;
    const int auto49935673_ai = 1;

    // Variable Initialization
    lv_buffID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itBuff = 1;
    for ( ; ( (auto49935673_ai >= 0 && lv_itBuff <= auto49935673_ae) || (auto49935673_ai < 0 && lv_itBuff >= auto49935673_ae) ) ; lv_itBuff += auto49935673_ai ) {
        if ((lv_itBuff > 0) && (lv_itBuff < 10)) {
            lv_buffID = ("NHbrTimeScaleBuff@00" + IntToString(lv_itBuff));
        }
        else if ((lv_itBuff >= 10) && (lv_itBuff < 100)) {
            lv_buffID = ("NHbrTimeScaleBuff@0" + IntToString(lv_itBuff));
        }
        else if ((lv_itBuff == 100)) {
            lv_buffID = ("NHbrTimeScaleBuff@" + IntToString(lv_itBuff));
        }
        libNHBR_gv_hybridTimeScaleBuff[lv_itBuff] = (lv_buffID);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffInitialization_Init () {
    libNHBR_gt_HybridTimeScaleBuffInitialization = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Common - Construction Started
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;
    unit lv_builder;
    fixed lv_energyUsage;
    fixed lv_drainedEnergyValue;
    bool lv_builderIsStructure;
    fixed lv_progress;
    fixed lv_totalBuildTime;

    // Automatic Variable Declarations
    string auto78080516_val;
    const int autoC07F71A4_n = 32;
    int autoC07F71A4_i;

    // Variable Initialization
    lv_targetStructure = EventUnitProgressUnit();
    lv_builder = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_targetStructure, lv_targetStructure) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_builder, c_unitPropEnergy, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto78080516_val = UnitGetType(lv_builder);
    if (auto78080516_val == "NHbrTemple") {
        lv_builderIsStructure = true;
        lv_totalBuildTime = libNHBR_gf_HybridTimeScaleBuffUnitConstructionTime(lv_targetStructure, "TempleofOriginBuildConstruct");
        Wait(0.125, c_timeGame);
    }
    else if (auto78080516_val == "NHbrMinion") {
        lv_totalBuildTime = libNHBR_gf_HybridTimeScaleBuffUnitConstructionTime(lv_targetStructure, "NHbrMinionBuild");
    }
    else {
    }
    if ((lv_builderIsStructure == true)) {
        for (autoC07F71A4_i = 1; autoC07F71A4_i <= autoC07F71A4_n; autoC07F71A4_i += 1) {
            UnitIssueOrder(lv_builder, Order(AbilityCommand("que5Passive", 0)), c_orderQueueReplace);
        }
    }

    if ((lv_totalBuildTime <= 0.0)) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_targetStructure);
    UnitSetCustomValue(lv_builder, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_builder, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorAdd(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_builder, 1);
    lv_energyUsage = libNHBR_gf_HybridTimeScaleBuffCalculateEnergyUsageForUnit(lv_builder);
    lv_totalBuildTime *= (1/(libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff(lv_builder, lv_energyUsage)+1));
    lv_drainedEnergyValue = ((lv_energyUsage/lv_totalBuildTime)/16);
    UnitSetCustomValue(lv_builder, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), lv_drainedEnergyValue);
    UnitCreateEffectUnit(lv_targetStructure, "NHbrCommon@StoreBuilder", lv_builder);
    libNHBR_gf_HybridTimeScaleBuffAddTimeScaleBuffToUnitFromUnit(lv_builder, lv_energyUsage, lv_targetStructure);
    while (true) {
        if ((lv_builderIsStructure == true)) {
            lv_progress = UnitOrderGetProgress(lv_builder);
        }
        else {
            lv_progress = UnitGetProgressComplete(lv_builder, 1);
        }
        if (((UnitGetPropertyFixed(lv_builder, c_unitPropEnergy, c_unitPropCurrent) == 0.0) || (lv_progress >= 100.0))) {
            break;
        }

        UnitCreateEffectUnit(lv_builder, "NHbrTimeScaleBuff@DrainingEnergy", lv_builder);
        UnitSetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), (UnitGetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage)) + lv_drainedEnergyValue));
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_builder, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted_Init () {
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Common - Construction Completed
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;
    point lv_point;
    unit lv_builder;

    // Automatic Variable Declarations
    unitgroup auto44F2E05C_g;
    int auto44F2E05C_u;
    unit auto44F2E05C_var;
    unitgroup auto3A4CC96C_g;
    int auto3A4CC96C_u;
    unit auto3A4CC96C_var;

    // Variable Initialization
    lv_targetStructure = EventUnitProgressUnit();
    lv_point = UnitGetPosition(EventUnitProgressUnit());
    lv_builder = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_targetStructure, lv_targetStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_targetStructure);
    UnitBehaviorRemove(lv_targetStructure, "NHbrCommon@BuildersTracker", 1);
    UnitSetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    if ((UnitGetType(lv_builder) == "NHbrMinion")) {
        if ((UnitGroupCount(UnitGroupSearch("NHbrConstruct@AntiAir", UnitGetOwner(lv_builder), lv_point, 1.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            auto44F2E05C_g = UnitGroupSearch("NHbrConstruct@AntiAir", UnitGetOwner(lv_builder), lv_point, 1.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto44F2E05C_u = UnitGroupCount(auto44F2E05C_g, c_unitCountAll);
            for (;; auto44F2E05C_u -= 1) {
                auto44F2E05C_var = UnitGroupUnitFromEnd(auto44F2E05C_g, auto44F2E05C_u);
                if (auto44F2E05C_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto44F2E05C_var, "Create NHbrMinionBuild@BuildOneShot");
                libNtve_gf_SendActorMessageToUnit(auto44F2E05C_var, "Create NHbrMinionBuild@BuildOneShotLow");
                libNtve_gf_SendActorMessageToUnit(auto44F2E05C_var, "Create NHbrMinionBuild@SoundEnd");
            }
        }
        else if ((UnitGroupCount(UnitGroupSearch("NHbrConstruct@AntiGround", UnitGetOwner(lv_targetStructure), UnitGetPosition(lv_targetStructure), 1.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            auto3A4CC96C_g = UnitGroupSearch("NHbrConstruct@AntiGround", UnitGetOwner(lv_builder), lv_point, 1.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3A4CC96C_u = UnitGroupCount(auto3A4CC96C_g, c_unitCountAll);
            for (;; auto3A4CC96C_u -= 1) {
                auto3A4CC96C_var = UnitGroupUnitFromEnd(auto3A4CC96C_g, auto3A4CC96C_u);
                if (auto3A4CC96C_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto3A4CC96C_var, "Create NHbrMinionBuild@BuildOneShot");
                libNtve_gf_SendActorMessageToUnit(auto3A4CC96C_var, "Create NHbrMinionBuild@BuildOneShotLow");
                libNtve_gf_SendActorMessageToUnit(auto3A4CC96C_var, "Create NHbrMinionBuild@SoundEnd");
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted_Init () {
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Common - Construction Canceled
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;
    unit lv_itBuilder;

    // Automatic Variable Declarations
    unitgroup auto1FADCE83_g;
    int auto1FADCE83_u;

    // Variable Initialization
    lv_targetStructure = EventUnitProgressUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_targetStructure, lv_targetStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1FADCE83_g = UnitGetTrackedUnitGroup(lv_targetStructure, "NHbrCommon@BuildersTracker");
    auto1FADCE83_u = UnitGroupCount(auto1FADCE83_g, c_unitCountAll);
    for (;; auto1FADCE83_u -= 1) {
        lv_itBuilder = UnitGroupUnitFromEnd(auto1FADCE83_g, auto1FADCE83_u);
        if (lv_itBuilder == null) { break; }
        UnitSetPropertyFixed(lv_itBuilder, c_unitPropEnergy, (UnitGetPropertyFixed(lv_itBuilder, c_unitPropEnergy, c_unitPropCurrent) + UnitGetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage))));
    }
    UnitBehaviorRemove(lv_targetStructure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled_Init () {
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Minion - Construction Resumed
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;
    unit lv_minion;
    fixed lv_energyUsage;
    fixed lv_energyCurrent;
    fixed lv_drainedEnergyValue;
    fixed lv_newEnergyValue;
    fixed lv_totalBuildTime;
    unit lv_itBuilder;

    // Automatic Variable Declarations
    unitgroup auto2E38755A_g;
    int auto2E38755A_u;

    // Variable Initialization
    lv_targetStructure = EventUnitProgressUnit();
    lv_minion = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_minion) == "NHbrMinion"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_minion, c_unitPropEnergy, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_targetStructure);
    UnitSetCustomValue(lv_minion, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_minion, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorAdd(lv_minion, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_minion, 1);
    auto2E38755A_g = UnitGetTrackedUnitGroup(lv_targetStructure, "NHbrCommon@BuildersTracker");
    auto2E38755A_u = UnitGroupCount(auto2E38755A_g, c_unitCountAll);
    for (;; auto2E38755A_u -= 1) {
        lv_itBuilder = UnitGroupUnitFromEnd(auto2E38755A_g, auto2E38755A_u);
        if (lv_itBuilder == null) { break; }
        if ((lv_itBuilder != lv_minion)) {
            if ((UnitGetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage)) > UnitGetPropertyFixed(lv_minion, c_unitPropEnergy, c_unitPropCurrent))) {
                UnitSetPropertyFixed(lv_itBuilder, c_unitPropEnergy, (UnitGetPropertyFixed(lv_itBuilder, c_unitPropEnergy, c_unitPropCurrent) + UnitGetPropertyFixed(lv_minion, c_unitPropEnergy, c_unitPropCurrent)));
            }
            else {
                UnitSetPropertyFixed(lv_itBuilder, c_unitPropEnergy, (UnitGetPropertyFixed(lv_itBuilder, c_unitPropEnergy, c_unitPropCurrent) + UnitGetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage))));
            }
        }

        UnitCreateEffectUnit(lv_targetStructure, "NHbrCommon@ClearBuilder", lv_minion);
        UnitSetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    }
    lv_totalBuildTime = libNHBR_gf_HybridTimeScaleBuffUnitConstructionTime(lv_targetStructure, "NHbrMinionBuild");
    lv_totalBuildTime -= (lv_totalBuildTime*(UnitGetProgressComplete(lv_targetStructure, 1)/100));
    lv_energyUsage = libNHBR_gf_HybridTimeScaleBuffCalculateEnergyUsageForUnit(lv_minion);
    lv_totalBuildTime *= (1/(libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff(lv_minion, lv_energyUsage)+1));
    lv_drainedEnergyValue = ((lv_energyUsage/lv_totalBuildTime)/16);
    UnitSetCustomValue(lv_minion, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), lv_drainedEnergyValue);
    UnitCreateEffectUnit(lv_targetStructure, "NHbrCommon@StoreBuilder", lv_minion);
    libNHBR_gf_HybridTimeScaleBuffAddTimeScaleBuffToUnitFromUnit(lv_minion, lv_energyUsage, lv_targetStructure);
    while ((UnitGetProgressComplete(lv_minion, 1) < 100.0) && (UnitGetPropertyFixed(lv_minion, c_unitPropEnergy, c_unitPropCurrent) > 0.0)) {
        UnitCreateEffectUnit(lv_minion, "NHbrTimeScaleBuff@DrainingEnergy", lv_minion);
        UnitSetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), (UnitGetCustomValue(lv_targetStructure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage)) + lv_drainedEnergyValue));
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_minion, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed_Init () {
    libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Minion - Construction Paused
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetStructure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetStructure = EventUnitProgressUnit();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsUnderConstruction(lv_targetStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_targetStructure);
    UnitBehaviorRemove(EventUnit(), "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused_Init () {
    libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused, false);
    TriggerAddEventUnitConstructProgress(libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused, null, c_unitProgressStagePause);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Training Started
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;
    fixed lv_energyUsage;
    fixed lv_energyCurrent;
    fixed lv_drainedEnergyValue;
    fixed lv_queueTime;
    int lv_repeatTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_structure, c_unitPropEnergy, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorAdd(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_structure, 1);
    lv_queueTime = UnitQueueItemTime(lv_structure, c_unitQueueTimeTotal, 1);
    lv_energyUsage = libNHBR_gf_HybridTimeScaleBuffCalculateEnergyUsageForUnit(lv_structure);
    lv_queueTime *= (1/(libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff(lv_structure, lv_energyUsage)+1));
    lv_drainedEnergyValue = ((lv_energyUsage/lv_queueTime)/16);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), lv_drainedEnergyValue);
    libNHBR_gf_HybridTimeScaleBuffAddTimeScaleBuffToUnitFromUnit(lv_structure, lv_energyUsage, lv_structure);
    while (true) {
        if ((UnitQueueItemTime(lv_structure, c_unitQueueTimeRemaining, 1) == 0.0)) {
            break;
        }
        else {
            if ((UnitQueueItemTypeCheck(EventUnit(), 1, c_unitProgressTypeTrain) == true) && (UnitQueueGetProperty(EventUnit(), c_unitQueuePropertyUsed) == 1)) {
            }

        }
        UnitCreateEffectUnit(lv_structure, "NHbrTimeScaleBuff@DrainingEnergy", lv_structure);
        UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), (UnitGetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage)) + lv_drainedEnergyValue));
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted, false);
    TriggerAddEventUnitTrainProgress(libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Training Completed
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted, false);
    TriggerAddEventUnitTrainProgress(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Training Cancelled
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetPropertyFixed(lv_structure, c_unitPropEnergy, (UnitGetPropertyFixed(lv_structure, c_unitPropEnergy, c_unitPropCurrent) + UnitGetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage))));
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled, false);
    TriggerAddEventUnitTrainProgress(libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Research Started
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;
    fixed lv_energyUsage;
    fixed lv_drainedEnergyValue;
    bool lv_builderIsStructure;
    fixed lv_progress;
    fixed lv_totalResearchTime;
    int lv_repeatTime;

    // Automatic Variable Declarations
    int autoA870D26E_n;
    int autoA870D26E_i;

    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_structure, c_unitPropEnergy, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    lv_totalResearchTime = libNHBR_gf_HybridTimeScaleBuffUpgradeResearchTime(libNtve_gf_TriggeringProgressUpgrade(), lv_structure);
    if ((lv_totalResearchTime <= 0.0)) {
        return true;
    }

    UnitBehaviorAdd(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", lv_structure, 1);
    Wait(0.0625, c_timeGame);
    lv_energyUsage = libNHBR_gf_HybridTimeScaleBuffCalculateEnergyUsageForUnit(lv_structure);
    lv_totalResearchTime *= (1/(libNHBR_gf_HybridTimeScaleBuffBoosterPercentBuff(lv_structure, lv_energyUsage)+1));
    lv_drainedEnergyValue = ((lv_energyUsage/lv_totalResearchTime)/16);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), lv_drainedEnergyValue);
    libNHBR_gf_HybridTimeScaleBuffAddTimeScaleBuffToUnitFromUnit(lv_structure, lv_energyUsage, lv_structure);
    lv_repeatTime = FixedToInt(Round((lv_totalResearchTime / 0.0625)));
    autoA870D26E_n = lv_repeatTime;
    for (autoA870D26E_i = 1; autoA870D26E_i <= autoA870D26E_n; autoA870D26E_i += 1) {
        lv_progress = UnitGetProgressComplete(lv_structure, 1);
        if ((lv_progress >= 100.0)) {
            break;
        }

        UnitCreateEffectUnit(lv_structure, "NHbrTimeScaleBuff@DrainingEnergy", lv_structure);
        UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), (UnitGetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage)) + lv_drainedEnergyValue));
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted, false);
    TriggerAddEventUnitResearchProgress(libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Research Completed
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted, false);
    TriggerAddEventUnitResearchProgress(libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Time Scale Buff - Structure - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libNHBR_gf_RunValidatorOnUnit("RequiresRaceNHbr", lv_structure, lv_structure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_HybridTimeScaleBuffRemoveTimeScaleBuffFromUnit(lv_structure);
    UnitSetPropertyFixed(lv_structure, c_unitPropEnergy, (UnitGetPropertyFixed(lv_structure, c_unitPropEnergy, c_unitPropCurrent) + UnitGetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage))));
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleEnergyUsage), 0.0);
    UnitSetCustomValue(lv_structure, libNHBR_gf_CustomValueIndex(libNHBR_ge_CustomValueIndexes_TimeScaleDrainingEnergy), 0.0);
    UnitBehaviorRemove(lv_structure, "NHbrTimeScaleBuff@EnergyRegenSupressed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled_Init () {
    libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled = TriggerCreate("libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled_Func");
    TriggerEnable(libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled, false);
    TriggerAddEventUnitResearchProgress(libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Dominator - Upgrade To Advanced Dominator
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_dominator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "NHbrDominatorUpgradeToAdvancedDominator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_UpgradeUnittoUnitForPlayer("NHbrDominator", "NHbrDominatorAdvanced", EventPlayer());
    libNHBR_gf_UpgradeButtontoButtonForPlayer("NHbrVoidRiftTrain@WarpInDominator", "NHbrVoidRiftTrain@WarpInAdvancedDominator", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator_Init () {
    libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator = TriggerCreate("libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator_Func");
    TriggerEnable(libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator, false);
    TriggerAddEventUpgradeLevelChanged(libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Reaver - Upgrade To Advanced Reaver
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridReaverUpgradeToAdvancedReaver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "NHbrReaverUpgradeToAdvancedReaver"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_UpgradeUnittoUnitForPlayer("NHbrReaver", "NHbrReaverAdvanced", EventPlayer());
    libNHBR_gf_UpgradeButtontoButtonForPlayer("NHbrVoidRiftTrain@WarpInReaver", "NHbrVoidRiftTrain@WarpInAdvancedReaver", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridReaverUpgradeToAdvancedReaver_Init () {
    libNHBR_gt_HybridReaverUpgradeToAdvancedReaver = TriggerCreate("libNHBR_gt_HybridReaverUpgradeToAdvancedReaver_Func");
    TriggerEnable(libNHBR_gt_HybridReaverUpgradeToAdvancedReaver, false);
    TriggerAddEventUpgradeLevelChanged(libNHBR_gt_HybridReaverUpgradeToAdvancedReaver, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Nemesis - Upgrade To Advanced Nemesis
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "NHbrNemesisUpgradeToAdvancedNemesis"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNHBR_gf_UpgradeUnittoUnitForPlayer("NHbrNemesis", "NHbrNemesisAdvanced", EventPlayer());
    libNHBR_gf_UpgradeButtontoButtonForPlayer("NHbrVoidRiftTrain@WarpInNemesis", "NHbrVoidRiftTrain@WarpInAdvancedNemesis", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis_Init () {
    libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis = TriggerCreate("libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis_Func");
    TriggerEnable(libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis, false);
    TriggerAddEventUpgradeLevelChanged(libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silent - Weapon Buff
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_SilentWeaponBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_silent;
    fixed lv_weaponCooldown;
    fixed lv_networkAmount;
    fixed lv_networkPercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_silent = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_weaponCooldown = UnitWeaponPeriod(lv_silent, 1);
    lv_networkAmount = UnitGetPropertyFixed(lv_silent, c_unitPropEnergy, c_unitPropCurrent);
    lv_networkPercent = (0.01 * UnitGetPropertyFixed(lv_silent, c_unitPropEnergyPercent, c_unitPropCurrent));

    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponSetPeriodRemaining(lv_silent, 1, (lv_weaponCooldown/(libNHBR_gv_silentAttacksPerSecond*(1+lv_networkPercent))));
    UnitCreateEffectUnit(lv_silent, "NHbrSilentWeapon@ReduceNetwork", lv_silent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_SilentWeaponBuff_Init () {
    libNHBR_gt_SilentWeaponBuff = TriggerCreate("libNHBR_gt_SilentWeaponBuff_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_SilentWeaponBuff, c_playerAny, "NHbrSilentWeapon@MUDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Navigator - Cargo UI
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridNavigatorCargoUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_navigator;
    int lv_spaceUsed;
    unit lv_itCargoUnit;
    int[5] lv_cargoSizePerUnit;
    int lv_itSegment;
    int lv_unitStatusBar;
    int lv_itCargoSizeType;
    int lv_itCargoSize;
    int lv_lastUsedSegment;
    int lv_oldUsedSegment;
    int lv_size;

    // Automatic Variable Declarations
    const int auto00D40A2C_ae = 7;
    const int auto00D40A2C_ai = 1;
    unitgroup autoCFE5DA21_g;
    int autoCFE5DA21_u;
    int autoA4CE4C6C_val;
    const int autoBDFCD470_ae = 1;
    const int autoBDFCD470_ai = -1;
    int auto263FED96_val;
    int autoB30A1CE2_ae;
    const int autoB30A1CE2_ai = 1;
    int auto86545C68_ae;
    const int auto86545C68_ai = 1;

    // Variable Initialization
    lv_unitStatusBar = c_invalidDialogControlId;
    lv_oldUsedSegment = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NHbrNavigator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_navigator = EventUnit();
    lv_spaceUsed = UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed);
    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "CustomCargoBar", lv_navigator);
    lv_unitStatusBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCurrentValue(lv_unitStatusBar, UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed), PlayerGroupAll());
    lv_itSegment = 1;
    for ( ; ( (auto00D40A2C_ai >= 0 && lv_itSegment <= auto00D40A2C_ae) || (auto00D40A2C_ai < 0 && lv_itSegment >= auto00D40A2C_ae) ) ; lv_itSegment += auto00D40A2C_ai ) {
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, ("CustomCargoBar/Segmentator/Segment" + IntToString(lv_itSegment)), lv_navigator);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
    autoCFE5DA21_g = UnitCargoGroup(lv_navigator);
    autoCFE5DA21_u = UnitGroupCount(autoCFE5DA21_g, c_unitCountAll);
    for (;; autoCFE5DA21_u -= 1) {
        lv_itCargoUnit = UnitGroupUnitFromEnd(autoCFE5DA21_g, autoCFE5DA21_u);
        if (lv_itCargoUnit == null) { break; }
        autoA4CE4C6C_val = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_itCargoUnit), "CargoSize", c_playerAny);
        if (autoA4CE4C6C_val == 1) {
            lv_cargoSizePerUnit[libNHBR_ge_HybridNavigatorCargoUI_Size1] += 1;
        }
        else if (autoA4CE4C6C_val == 2) {
            lv_cargoSizePerUnit[libNHBR_ge_HybridNavigatorCargoUI_Size2] += 1;
        }
        else if (autoA4CE4C6C_val == 4) {
            lv_cargoSizePerUnit[libNHBR_ge_HybridNavigatorCargoUI_Size4] += 1;
        }
        else if (autoA4CE4C6C_val == 8) {
            lv_cargoSizePerUnit[libNHBR_ge_HybridNavigatorCargoUI_Size8] += 1;
        }
        else {
        }
    }
    lv_itCargoSizeType = 4;
    for ( ; ( (autoBDFCD470_ai >= 0 && lv_itCargoSizeType <= autoBDFCD470_ae) || (autoBDFCD470_ai < 0 && lv_itCargoSizeType >= autoBDFCD470_ae) ) ; lv_itCargoSizeType += autoBDFCD470_ai ) {
        if ((lv_cargoSizePerUnit[lv_itCargoSizeType] > 0)) {
            auto263FED96_val = lv_itCargoSizeType;
            if (auto263FED96_val == libNHBR_ge_HybridNavigatorCargoUI_Size1) {
                lv_size = 1;
            }
            else if (auto263FED96_val == libNHBR_ge_HybridNavigatorCargoUI_Size2) {
                lv_size = 2;
            }
            else if (auto263FED96_val == libNHBR_ge_HybridNavigatorCargoUI_Size4) {
                lv_size = 4;
            }
            else if (auto263FED96_val == libNHBR_ge_HybridNavigatorCargoUI_Size8) {
                lv_size = 8;
            }
            else {
            }
            autoB30A1CE2_ae = lv_cargoSizePerUnit[lv_itCargoSizeType];
            lv_itCargoSize = 1;
            for ( ; ( (autoB30A1CE2_ai >= 0 && lv_itCargoSize <= autoB30A1CE2_ae) || (autoB30A1CE2_ai < 0 && lv_itCargoSize >= autoB30A1CE2_ae) ) ; lv_itCargoSize += autoB30A1CE2_ai ) {
                lv_lastUsedSegment = (lv_lastUsedSegment + lv_size);
                if ((lv_size > 1)) {
                    auto86545C68_ae = (lv_lastUsedSegment-1);
                    lv_itSegment = lv_oldUsedSegment;
                    for ( ; ( (auto86545C68_ai >= 0 && lv_itSegment <= auto86545C68_ae) || (auto86545C68_ai < 0 && lv_itSegment >= auto86545C68_ae) ) ; lv_itSegment += auto86545C68_ai ) {
                        DialogControlHookupUnitStatus(c_triggerControlTypeImage, ("CustomCargoBar/Segmentator/Segment" + IntToString(lv_itSegment)), lv_navigator);
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        lv_oldUsedSegment = (lv_lastUsedSegment+1);
                    }
                }

                if ((lv_lastUsedSegment == 8)) {
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridNavigatorCargoUI_Init () {
    libNHBR_gt_HybridNavigatorCargoUI = TriggerCreate("libNHBR_gt_HybridNavigatorCargoUI_Func");
    TriggerAddEventUnitCargo(libNHBR_gt_HybridNavigatorCargoUI, null, true);
    TriggerAddEventUnitCargo(libNHBR_gt_HybridNavigatorCargoUI, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Reaver - Consume DNA - Autocast On
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridReaverConsumeDNAAutocastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "NHbrReaverConsumeDNA@AutocastController", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridReaverConsumeDNAAutocastOn_Init () {
    libNHBR_gt_HybridReaverConsumeDNAAutocastOn = TriggerCreate("libNHBR_gt_HybridReaverConsumeDNAAutocastOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libNHBR_gt_HybridReaverConsumeDNAAutocastOn, null, AbilityCommand("NHbrReaverConsumeDNA", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Reaver - Consume DNA - Autocast Off
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridReaverConsumeDNAAutocastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "NHbrReaverConsumeDNA@AutocastController", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridReaverConsumeDNAAutocastOff_Init () {
    libNHBR_gt_HybridReaverConsumeDNAAutocastOff = TriggerCreate("libNHBR_gt_HybridReaverConsumeDNAAutocastOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libNHBR_gt_HybridReaverConsumeDNAAutocastOff, null, AbilityCommand("NHbrReaverConsumeDNA", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Void Rift - Cargo UI
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_HybridVoidRiftCargoUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_navigator;
    int lv_spaceUsed;
    int lv_unitStatusBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitStatusBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NHbrVoidRift"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_navigator = EventUnit();
    lv_spaceUsed = UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed);
    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "CustomCargoBar", lv_navigator);
    lv_unitStatusBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCurrentValue(lv_unitStatusBar, UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_HybridVoidRiftCargoUI_Init () {
    libNHBR_gt_HybridVoidRiftCargoUI = TriggerCreate("libNHBR_gt_HybridVoidRiftCargoUI_Func");
    TriggerAddEventUnitCargo(libNHBR_gt_HybridVoidRiftCargoUI, null, true);
    TriggerAddEventUnitCargo(libNHBR_gt_HybridVoidRiftCargoUI, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Spawn
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidRiftSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalSupply;
    fixed lv_supplyCap;
    int lv_race;
    int lv_unit;
    int lv_numberofUnits;
    int[101][3] lv_spawnedUnits;
    unit lv_voidRift;

    // Automatic Variable Declarations
    int autoCF87346E_ae;
    int autoCF87346E_var;

    // Variable Initialization
    lv_voidRift = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supplyCap = IntToFixed((UnitBehaviorCount(lv_voidRift, "VoidSpawns") + (TechTreeUpgradeCount(EventPlayer(), "EmpoweredRifts", c_techCountCompleteOnly) * 5)));
    while ((lv_totalSupply < lv_supplyCap)) {
        lv_race = RandomInt(1, 3);
        lv_unit = RandomInt(1, 15);
        if ((libNHBR_gv_voidRiftUnitSpawns[lv_race][lv_unit] != null)) {
            if (((lv_totalSupply + UnitTypeGetProperty(libNHBR_gv_voidRiftUnitSpawns[lv_race][lv_unit], c_unitPropSuppliesUsed)) <= lv_supplyCap)) {
                lv_numberofUnits += 1;
                lv_totalSupply += UnitTypeGetProperty(libNHBR_gv_voidRiftUnitSpawns[lv_race][lv_unit], c_unitPropSuppliesUsed);
                lv_spawnedUnits[lv_numberofUnits][1] = lv_race;
                lv_spawnedUnits[lv_numberofUnits][2] = lv_unit;
            }

        }

    }
    autoCF87346E_ae = lv_numberofUnits;
    autoCF87346E_var = 1;
    for ( ; autoCF87346E_var <= autoCF87346E_ae; autoCF87346E_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libNHBR_gv_voidRiftUnitSpawns[lv_spawnedUnits[autoCF87346E_var][1]][lv_spawnedUnits[autoCF87346E_var][2]], 0, EventPlayer(), UnitGetPosition(lv_voidRift));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated())))), c_orderQueueReplace);
        UnitBehaviorAdd(UnitLastCreated(), "VoidSpawn", lv_voidRift, 1);
    }
    if ((UnitBehaviorCount(lv_voidRift, "VoidSpawns") < 10)) {
        UnitBehaviorAdd(lv_voidRift, "VoidSpawns", lv_voidRift, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidRiftSpawn_Init () {
    libNHBR_gt_VoidRiftSpawn = TriggerCreate("libNHBR_gt_VoidRiftSpawn_Func");
    TriggerAddEventPlayerEffectUsed(libNHBR_gt_VoidRiftSpawn, c_playerAny, "VoidSpawnDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Upgrades
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidRiftUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoCBA19294_ae = 3;
    int autoCBA19294_var;

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == ("NHbr")))) {
            return false;
        }

        if (!((libNHBR_gf_VoidRiftUpgrade(EventUpgradeName()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCBA19294_var = 1;
    for ( ; autoCBA19294_var <= autoCBA19294_ae; autoCBA19294_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranInfantryWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranInfantryArmorLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranVehicleWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranVehiclePlatingLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranShipWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranShipPlatingLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("zergmeleeweapons" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("zergmissileweapons" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("zerggroundarmor" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("zergflyerattack" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("zergflyerarmor" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossGroundWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossGroundArmorLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossShieldsLevel" + IntToString((autoCBA19294_var + 1)))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineResearch@ProtectionArmor" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossAirWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossAirArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranInfantryWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranInfantryArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranVehicleWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranVehicleArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranShipWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("TerranShipArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ZergMeleeWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ZergMissileWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ZergGroundArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ZergFlyerWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ZergFlyerArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossGroundWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundWeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossGroundArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineUpgrades@GroundArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossShieldsLevel" + IntToString((autoCBA19294_var + 1)))), TechTreeUpgradeCount(EventPlayer(), (("NHbrEngineResearch@ProtectionArmor" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossAirWeaponsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@WeaponsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (("ProtossAirArmorsLevel" + IntToString(autoCBA19294_var))), TechTreeUpgradeCount(EventPlayer(), (("NHbrVoidPortalUpgrades@AirArmorsLevel" + IntToString(autoCBA19294_var))), c_techCountCompleteOnly));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidRiftUpgrades_Init () {
    libNHBR_gt_VoidRiftUpgrades = TriggerCreate("libNHBR_gt_VoidRiftUpgrades_Func");
    TriggerAddEventUpgradeLevelChanged(libNHBR_gt_VoidRiftUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Idle Units
//--------------------------------------------------------------------------------------------------
bool libNHBR_gt_VoidRiftIdleUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0045C0AB_g;
    int auto0045C0AB_var;
    unitgroup auto2CF7D153_g;
    int auto2CF7D153_u;
    unit auto2CF7D153_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0045C0AB_g = PlayerGroupAll();
    auto0045C0AB_var = -1;
    while (true) {
        auto0045C0AB_var = PlayerGroupNextPlayer(auto0045C0AB_g, auto0045C0AB_var);
        if (auto0045C0AB_var < 0) { break; }
        if (true) {
            auto2CF7D153_g = UnitGroupIdle(auto0045C0AB_var, false);
            auto2CF7D153_u = UnitGroupCount(auto2CF7D153_g, c_unitCountAll);
            for (;; auto2CF7D153_u -= 1) {
                auto2CF7D153_var = UnitGroupUnitFromEnd(auto2CF7D153_g, auto2CF7D153_u);
                if (auto2CF7D153_var == null) { break; }
                if (((UnitHasBehavior2(auto2CF7D153_var, "VoidSpawn") == true) || (UnitGetType(auto2CF7D153_var) == "Propagator"))) {
                    UnitIssueOrder(auto2CF7D153_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(auto0045C0AB_var, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(auto2CF7D153_var)))), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNHBR_gt_VoidRiftIdleUnits_Init () {
    libNHBR_gt_VoidRiftIdleUnits = TriggerCreate("libNHBR_gt_VoidRiftIdleUnits_Func");
    TriggerAddEventTimePeriodic(libNHBR_gt_VoidRiftIdleUnits, 3.0, c_timeGame);
}

void libNHBR_InitTriggers () {
    libNHBR_gt_CreateDominatorBehemoth_Init();
    libNHBR_gt_PropagatorTouchGround_Init();
    libNHBR_gt_PropagatorTouchAir_Init();
    libNHBR_gt_VoidReanimateRevive_Init();
    libNHBR_gt_VoidReanimatorUnitDeath_Init();
    libNHBR_gt_MapInit_Init();
    libNHBR_gt_VoidRiftIdleUnits2OnOff_Init();
    libNHBR_gt_OfflineTestingResetPlayer2Resource_Init();
    libNHBR_gt_InitializeNetworkHybridRace_Init();
    libNHBR_gt_HybridBuildController_Init();
    libNHBR_gt_HybridNetworkNewCalculate_Init();
    libNHBR_gt_HybridNetworkPowerSourceUnitTypeInitialization_Init();
    libNHBR_gt_HybridNetworkNewCaseController_Init();
    libNHBR_gt_HybridNetworkNewCaseControllerRemoved_Init();
    libNHBR_gt_HybridProtectionUpdateArmorDataProperty_Init();
    libNHBR_gt_HybridLifeForceUpdateArmorDataProperty_Init();
    libNHBR_gt_HybridLifeForceUpdateArmorDataProperty2_Init();
    libNHBR_gt_HybridTeleportOverrideTPTime_Init();
    libNHBR_gt_HybridTeleportdummyTransferTargetUnit_Init();
    libNHBR_gt_HybridTeleportdummyMoveTransferTargetUnit_Init();
    libNHBR_gt_HybridTeleportTurnTargetingOrderOn_Init();
    libNHBR_gt_HybridTeleportTurnTargetingOrderOff_Init();
    libNHBR_gt_HybridTeleportConstructionProgressIonicFakeBuildCancel_Init();
    libNHBR_gt_HybridTeleportConstructionProgress_Init();
    libNHBR_gt_HybridTeleportTransferDamage_Init();
    libNHBR_gt_HybridTimeScaleBuffInitialization_Init();
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionStarted_Init();
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionCompleted_Init();
    libNHBR_gt_HybridTimeScaleBuffCommonConstructionCanceled_Init();
    libNHBR_gt_HybridTimeScaleBuffMinionConstructionResumed_Init();
    libNHBR_gt_HybridTimeScaleBuffMinionConstructionPaused_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingStarted_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingCompleted_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureTrainingCancelled_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureResearchStarted_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureResearchCompleted_Init();
    libNHBR_gt_HybridTimeScaleBuffStructureResearchCancelled_Init();
    libNHBR_gt_HybridDominatorUpgradeToAdvancedDominator_Init();
    libNHBR_gt_HybridReaverUpgradeToAdvancedReaver_Init();
    libNHBR_gt_HybridNemesisUpgradeToAdvancedNemesis_Init();
    libNHBR_gt_SilentWeaponBuff_Init();
    libNHBR_gt_HybridNavigatorCargoUI_Init();
    libNHBR_gt_HybridReaverConsumeDNAAutocastOn_Init();
    libNHBR_gt_HybridReaverConsumeDNAAutocastOff_Init();
    libNHBR_gt_HybridVoidRiftCargoUI_Init();
    libNHBR_gt_VoidRiftSpawn_Init();
    libNHBR_gt_VoidRiftUpgrades_Init();
    libNHBR_gt_VoidRiftIdleUnits_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNHBR_InitLib_completed = false;

void libNHBR_InitLib () {
    if (libNHBR_InitLib_completed) {
        return;
    }

    libNHBR_InitLib_completed = true;

    libNHBR_InitLibraries();
    libNHBR_InitVariables();
    libNHBR_InitTriggers();
}

